0x00b1 acopy      {REG,REG}            Copy status Attributes op2 to op1
0x0018 addf       {REG,REG,REG}        Convert and Add to Float (op1=op2+op3) (Deprecated)
0x0019 addf       {REG,REG,FLOAT}      Convert and Add to Float (op1=op2+op3) (Deprecated)
0x0003 addi       {REG,REG,REG}        Convert and Add to Integer (op1=op2+op3) (Deprecated)
0x0004 addi       {REG,REG,INT}        Convert and Add to Integer (op1=op2+op3) (Deprecated)
0x008c and        {REG,REG,REG}        Logical (int) and op1=(op2 && op3)
0x0047 append     {REG,REG}            String Append (op1=op1||op2)
0x0044 appendchar {REG,REG}            Append Concat Char op2 (as int) on op1
0x0128 arr2redir  {REG,REG}            Redirect op1 <- array op2
0x00f5 bcf        {ID,REG}             if op2=0 goto op1(if false) else dec op2
0x00f6 bcf        {ID,REG,REG}         if op2=0 goto op1(if false) else dec op2 and inc op3
0x00f0 bct        {ID,REG}             dec op2; if op2>0; goto op1(if true)
0x00f1 bct        {ID,REG,REG}         dec op2; inc op3, if op2>0; goto op1(if true)
0x00f2 bctnm      {ID,REG}             dec op2; if op2>=0; goto op1(if true)
0x00f3 bctnm      {ID,REG,REG}         dec op2; inc op3, if op2>=0; goto op1(if true)
0x00f4 bctp       {ID,REG}             inc op2; goto op1
0x0101 beq        {ID,REG,REG}         if op2==op3 then goto op1
0x0102 beq        {ID,REG,INT}         if op2==op3 then goto op1
0x00f9 bge        {ID,REG,REG}         if op2>=op3 then goto op1
0x00fa bge        {ID,REG,INT}         if op2>=op3 then goto op1
0x00f7 bgt        {ID,REG,REG}         if op2>op3 then goto op1
0x00f8 bgt        {ID,REG,INT}         if op2>op3 then goto op1
0x00fd ble        {ID,REG,REG}         if op2<=op3 then goto op1
0x00fe ble        {ID,REG,INT}         if op2<=op3 then goto op1
0x00fb blt        {ID,REG,REG}         if op2<op3 then goto op1
0x00fc blt        {ID,REG,INT}         if op2<op3 then goto op1
0x00ff bne        {ID,REG,REG}         if op2!=op3 then goto op1
0x0100 bne        {ID,REG,INT}         if op2!=op3 then goto op1
0x0141 bpoff      no operand           Disable Breakpoints
0x0140 bpon       no operand           Enable Breakpoints with existing handler
0x013f bpon       {FUNC}               Enable Breakpoints with op1 handler
0x00a7 br         {ID}                 Branch to op1
0x00a9 brf        {ID,REG}             Branch to op1 if op2 false
0x00a8 brt        {ID,REG}             Branch to op1 if op2 true
0x00aa brtf       {ID,ID,REG}          Branch to op1 if op3 true, otherwise branch to op2
0x010f brtpandt   {ID,REG,INT}         if op2.typeflag && op3 true then goto op1
0x010e brtpt      {ID,REG}             if op2.typeflag true then goto op1
0x00d7 btof       {REG}                Set register float value from its boolean value
0x00d6 btoi       {REG}                Set register integer value from its boolean value
0x00d8 btos       {REG}                Set register string value from its boolean value
0x009e call       {REG,FUNC}           Call procedure (op1=op2())
0x009f call       {REG,FUNC,REG}       Call procedure (op1=op2(op3...) )
0x009d call       {FUNC}               Call procedure (op1())
0x00ea cnop       no operand           no operation
0x0041 concat     {REG,REG,REG}        String Concat (op1=op2||op3)
0x0042 concat     {REG,REG,STRING}     String Concat (op1=op2||op3)
0x0043 concat     {REG,STRING,REG}     String Concat (op1=op2||op3)
0x0045 concchar   {REG,REG,REG}        Concat Char op1 from op2 position op3
0x00ad copy       {REG,REG}            Copy op2 to op1
0x015b dadd       {REG,REG,REG}        Decimal Add (op1=op2-op3)
0x015c dadd       {REG,REG,DECIMAL}    Decimal Add (op1=op2-op3)
0x00a0 dcall      {REG,REG,REG}        Dynamic call procedure (op1=op2(op3...) )
0x0175 dcopy      {REG,REG}            Copy Decimal op2 to op1
0x015f ddiv       {REG,REG,REG}        Decimal Divide (op1=op2/op3)
0x0160 ddiv       {REG,REG,DECIMAL}    Decimal Divide (op1=op2/op3)
0x0161 ddiv       {REG,DECIMAL,REG}    Decimal Divide (op1=op2/op3)
0x002b dec        {REG}                Decrement Int (op1--)
0x002d dec0       no operand           Decrement R0-- Int
0x002f dec1       no operand           Decrement R1-- Int
0x0031 dec2       no operand           Decrement R2-- Int
0x014e decplnm    {REG,REG,REG}        Get Decimal Plugin Name op1=name op2=description op3=version
0x0162 deq        {REG,REG,REG}        Decimal Equals op1=(op2==op3)
0x0163 deq        {REG,REG,DECIMAL}    Decimal Equals op1=(op2==op3)
0x0174 deqbr      {ID,REG,REG}         Decimal Equal if (op2=op3) goto op1
0x0176 dextr      {REG,REG,REG}        op3 decimal extracted to op1 string coefficient and op2 int decimal exponent
0x0166 dgt        {REG,REG,REG}        Decimal Greater than op1=(op2>op3)
0x0167 dgt        {REG,REG,DECIMAL}    Decimal Greater than op1=(op2>op3)
0x0168 dgt        {REG,DECIMAL,REG}    Decimal Greater than op1=(op2>op3)
0x0172 dgtbr      {ID,REG,REG}         Decimal Greater than if (op2>op3) goto op1
0x0169 dgte       {REG,REG,REG}        Decimal Greater than equals op1=(op2>=op3)
0x016a dgte       {REG,REG,DECIMAL}    Decimal Greater than equals op1=(op2>=op3)
0x016b dgte       {REG,DECIMAL,REG}    Decimal Greater than equals op1=(op2>=op3)
0x0027 divf       {REG,REG,REG}        Convert and Divide to Float (op1=op2/op3) (Deprecated)
0x0028 divf       {REG,REG,FLOAT}      Convert and Divide to Float (op1=op2/op3) (Deprecated)
0x0029 divf       {REG,FLOAT,REG}      Convert and Divide to Float (op1=op2/op3) (Deprecated)
0x0011 divi       {REG,REG,REG}        Convert and Divide to Integer (op1=op2/op3) (Deprecated)
0x0012 divi       {REG,REG,INT}        Convert and Divide to Integer (op1=op2/op3) (Deprecated)
0x0111 dllparms   {REG,REG,REG}        fetches parms for DLL call 
0x016c dlt        {REG,REG,REG}        Decimal Less than op1=(op2<op3)
0x016d dlt        {REG,REG,DECIMAL}    Decimal Less than op1=(op2<op3)
0x016e dlt        {REG,DECIMAL,REG}    Decimal Less than op1=(op2<op3)
0x0173 dltbr      {ID,REG,REG}         Decimal Less than if (op2<op3) goto op1
0x016f dlte       {REG,REG,REG}        Decimal Less than equals op1=(op2<=op3)
0x0170 dlte       {REG,REG,DECIMAL}    Decimal Less than equals op1=(op2<=op3)
0x0171 dlte       {REG,DECIMAL,REG}    Decimal Less than equals op1=(op2<=op3)
0x015d dmult      {REG,REG,REG}        Decimal Multiply (op1=op2*op3)
0x015e dmult      {REG,REG,DECIMAL}    Decimal Multiply (op1=op2*op3)
0x0164 dne        {REG,REG,REG}        Decimal Not equals op1=(op2!=op3)
0x0165 dne        {REG,REG,DECIMAL}    Decimal Not equals op1=(op2!=op3)
0x0177 dpow       {REG,REG,REG}        op1=op2**op3
0x0178 dpow       {REG,REG,DECIMAL}    op1=op2**op3
0x0179 dpow       {REG,DECIMAL,REG}    op1=op2**op3
0x00e5 dropchar   {REG,REG,REG}        set op1 from op2 after dropping all chars from op3
0x017a dsex       {REG}                Decimal op1 = -op1 (sign change)
0x0158 dsub       {REG,REG,REG}        Decimal Subtract (op1=op2-op3)
0x0159 dsub       {REG,REG,DECIMAL}    Decimal Subtract (op1=op2-op3)
0x015a dsub       {REG,DECIMAL,REG}    Decimal Subtract (op1=op2-op3)
0x0157 dtof       {REG}                Convert Decimal Number to Float op1=f2dec(op2)
0x0154 dtoi       {REG}                Convert Decimal Number to Integer op1=dec2s(op2)
0x0153 dtos       {REG}                Convert Decimal Number to Decimal String op1=dec2s(op2)
0x0123 erase      {REG}                erases register contents
0x00d3 exit       no operand           Exit
0x00d4 exit       {REG}                Exit op1
0x00d5 exit       {INT}                Exit op1
0x0016 fadd       {REG,REG,REG}        Float Add (op1=op2+op3)
0x0017 fadd       {REG,REG,FLOAT}      Float Add (op1=op2+op3)
0x0135 fclearerr  {REG}                clearerr op1 file*(int)
0x012b fclose     {REG,REG}            op1 rc(int) = fclose op2 file*(int)
0x00af fcopy      {REG,REG}            Copy Float op2 to op1
0x0024 fdiv       {REG,REG,REG}        Float Divide (op1=op2/op3)
0x0025 fdiv       {REG,REG,FLOAT}      Float Divide (op1=op2/op3)
0x0026 fdiv       {REG,FLOAT,REG}      Float Divide (op1=op2/op3)
0x0136 feof       {REG,REG}            op1 rc(int) = feof op2 file*(int)
0x0068 feq        {REG,REG,REG}        Float Equals op1=(op2==op3)
0x0069 feq        {REG,REG,FLOAT}      Float Equals op1=(op2==op3)
0x0137 ferror     {REG,REG}            op1 rc(int) = ferror op2 file*(int)
0x00e1 fextr      {REG,REG,REG}        op3 float extracted to op1 string coefficient and op2 int decimal exponent
0x012c fflush     {REG,REG}            op1 rc(int) = fflush op2 file*(int)
0x00e0 fformat    {REG,REG,REG}        DEPRECATED use fextr. Set string value from float value using a format string
0x006c fgt        {REG,REG,REG}        Float Greater than op1=(op2>op3)
0x006d fgt        {REG,REG,FLOAT}      Float Greater than op1=(op2>op3)
0x006e fgt        {REG,FLOAT,REG}      Float Greater than op1=(op2>op3)
0x0078 fgtbr      {ID,REG,REG}         Float Greater than if (op2>op3) goto op1
0x006f fgte       {REG,REG,REG}        Float Greater than equals op1=(op2>=op3)
0x0070 fgte       {REG,REG,FLOAT}      Float Greater than equals op1=(op2>=op3)
0x0071 fgte       {REG,FLOAT,REG}      Float Greater than equals op1=(op2>=op3)
0x0072 flt        {REG,REG,REG}        Float Less than op1=(op2<op3)
0x0073 flt        {REG,REG,FLOAT}      Float Less than op1=(op2<op3)
0x0074 flt        {REG,FLOAT,REG}      Float Less than op1=(op2<op3)
0x0079 fltbr      {ID,REG,REG}         Float Less than if (op2<op3) goto op1
0x0075 flte       {REG,REG,REG}        Float Less than equals op1=(op2<=op3)
0x0076 flte       {REG,REG,FLOAT}      Float Less than equals op1=(op2<=op3)
0x0077 flte       {REG,FLOAT,REG}      Float Less than equals op1=(op2<=op3)
0x0020 fmult      {REG,REG,REG}        Float Multiply (op1=op2*op3)
0x0021 fmult      {REG,REG,FLOAT}      Float Multiply (op1=op2*op3)
0x0103 fndblnk    {REG,REG,REG}        op1 = find next blank in op2[op3] and behind
0x0104 fndnblnk   {REG,REG,REG}        op1 = find next next non blank in op2[op3] and behind
0x006a fne        {REG,REG,REG}        Float Not equals op1=(op2!=op3)
0x006b fne        {REG,REG,FLOAT}      Float Not equals op1=(op2!=op3)
0x012a fopen      {REG,REG,REG}        op1 file*(int) = fopen filename op2(string) mode op3(string)
0x00ee fpow       {REG,REG,REG}        op1=op2**op3
0x00ef fpow       {REG,REG,FLOAT}      op1=op2**op3
0x012d freadb     {REG,REG,REG}        op1(binary) = fread op2 file*(int) op3 bytes(int)
0x012f freadbyte  {REG,REG}            op1 (int) = read byte op2 file*(int)
0x0130 freadcdpt  {REG,REG}            op1 (string and int) = read codepoint op2 file*(int)
0x012e freadline  {REG,REG}            op1 (string) = read until newline op2 file*(int)
0x0106 fsex       {REG}                float op1 = -op1 (sign change)
0x001a fsub       {REG,REG,REG}        Float Subtract (op1=op2-op3)
0x001b fsub       {REG,REG,FLOAT}      Float Subtract (op1=op2-op3)
0x001c fsub       {REG,FLOAT,REG}      Float Subtract (op1=op2-op3)
0x00dd ftob       {REG}                Set register boolean (int 1 or 0) value from its float value
0x0156 ftod       {REG}                Convert Float to Decimal Number op1=f2dec(op2)
0x00dc ftoi       {REG}                Set register int value from its float value
0x00da ftos       {REG}                Set register string value from its float value
0x0131 fwrite     {REG,REG}            fwrite to op1 file*(int) from op2(string)
0x0132 fwriteb    {REG,REG}            fwrite to op1 file*(int) from op2(binary)
0x0133 fwritebyte {REG,REG}            write byte to op1 file*(int) op2 source(int)
0x0134 fwritecdpt {REG,REG}            write codepoint to op1 file*(int) op2 source(int)
0x011e getabufs   {REG,REG}            get attribute buffer size op1 = op2.max_attributes
0x010d getandtp   {REG,REG,INT}        get the register type flag with mask (op1(int) = op2.typeflag & op3)
0x0118 getattrs   {REG,REG}            get number attributes op1 = op2.num_attributes
0x0119 getattrs   {REG,REG,INT}        get number attributes op1 = op2.num_attributes + op3
0x00e9 getbyte    {REG,REG,REG}        get byte  (op1=op2(op3)
0x0151 getdgts    {REG}                Get Decimal Digits op1=digits
0x0115 getenv     {REG,REG}            get environment variable, op1=env[op2]
0x0116 getenv     {REG,STRING}         get environment variable, op1=env[op2]
0x0054 getstrpos  {REG,REG}            Get String (op2) charpos into op1
0x0107 gettp      {REG,REG}            gets the register type flag (op1 = op2.typeflag)
0x0096 gmap       {REG,REG}            Map op1 to global var name in op2
0x0097 gmap       {REG,STRING}         Map op1 to global var name op2
0x0051 hexchar    {REG,REG,REG}        op1 (as hex) = op2[op3]
0x0001 iadd       {REG,REG,REG}        Integer Add (op1=op2+op3)
0x0002 iadd       {REG,REG,INT}        Integer Add (op1=op2+op3)
0x0032 iand       {REG,REG,REG}        bit wise and of 2 integers (op1=op2&op3)
0x0033 iand       {REG,REG,INT}        bit wise and of 2 integers (op1=op2&op3)
0x014b ichkrng    {REG,REG,REG}        if op1<op2 | op1>op3 signal OUT_OF_RANGE
0x014a ichkrng    {REG,INT,REG}        if op1<op2 | op1>op3 signal OUT_OF_RANGE
0x0149 ichkrng    {REG,INT,INT}        if op1<op2 | op1>op3 signal OUT_OF_RANGE
0x014d ichkrng    {INT,REG,REG}        if op1<op2 | op1>op3 signal OUT_OF_RANGE
0x014c ichkrng    {INT,INT,REG}        if op1<op2 | op1>op3 signal OUT_OF_RANGE
0x00ae icopy      {REG,REG}            Copy Integer op2 to op1
0x000e idiv       {REG,REG,REG}        Integer Divide (op1=op2/op3)
0x000f idiv       {REG,REG,INT}        Integer Divide (op1=op2/op3)
0x0010 idiv       {REG,INT,REG}        Integer Divide (op1=op2/op3)
0x0056 ieq        {REG,REG,REG}        Int Equals op1=(op2==op3)
0x0057 ieq        {REG,REG,INT}        Int Equals op1=(op2==op3)
0x005a igt        {REG,REG,REG}        Int Greater than op1=(op2>op3)
0x005b igt        {REG,REG,INT}        Int Greater than op1=(op2>op3)
0x005c igt        {REG,INT,REG}        Int Greater than op1=(op2>op3)
0x0066 igtbr      {ID,REG,REG}         Int Greater than if (op2>op3) goto op1
0x005d igte       {REG,REG,REG}        Int Greater than equals op1=(op2>=op3)
0x005e igte       {REG,REG,INT}        Int Greater than equals op1=(op2>=op3)
0x005f igte       {REG,INT,REG}        Int Greater than equals op1=(op2>=op3)
0x0060 ilt        {REG,REG,REG}        Int Less than op1=(op2<op3)
0x0061 ilt        {REG,REG,INT}        Int Less than op1=(op2<op3)
0x0062 ilt        {REG,INT,REG}        Int Less than op1=(op2<op3)
0x0067 iltbr      {ID,REG,REG}         Int Less than if (op2<op3) goto op1
0x0063 ilte       {REG,REG,REG}        Int Less than equals op1=(op2<=op3)
0x0064 ilte       {REG,REG,INT}        Int Less than equals op1=(op2<=op3)
0x0065 ilte       {REG,INT,REG}        Int Less than equals op1=(op2<=op3)
0x0013 imod       {REG,REG,REG}        Integer Modulo (op1=op2%op3)
0x0014 imod       {REG,REG,INT}        Integer Modulo (op1=op2%op3)
0x0015 imod       {REG,INT,REG}        Integer Modulo (op1=op2&op3)
0x000a imult      {REG,REG,REG}        Integer Multiply (op1=op2*op3)
0x000b imult      {REG,REG,INT}        Integer Multiply (op1=op2*op3)
0x002a inc        {REG}                Increment Int (op1++)
0x002c inc0       no operand           Increment R0++ Int
0x002e inc1       no operand           Increment R1++ Int
0x0030 inc2       no operand           Increment R2++ Int
0x0058 ine        {REG,REG,REG}        Int Not equals op1=(op2!=op3)
0x0059 ine        {REG,REG,INT}        Int Not equals op1=(op2!=op3)
0x003c inot       {REG,REG}            inverts all bits of an integer (op1=~op2)
0x003d inot       {REG,INT}            inverts all bits of an integer (op1=~op2)
0x0034 ior        {REG,REG,REG}        bit wise or of 2 integers (op1=op2|op3)
0x0035 ior        {REG,REG,INT}        bit wise or of 2 integers (op1=op2|op3)
0x00eb ipow       {REG,REG,REG}        op1=op2**op3
0x00ec ipow       {REG,REG,INT}        op1=op2**op3
0x00ed ipow       {REG,INT,REG}        op1=op2**op3
0x0112 irand      {REG,REG}            random number random, op1=irand(op2)
0x0113 irand      {REG,INT}            random number random, op1=irand(op2)
0x0105 isex       {REG}                dec op1 = -op1 (sign change)
0x0038 ishl       {REG,REG,REG}        bit wise shift logical left of integer (op1=op2<<op3)
0x0039 ishl       {REG,REG,INT}        bit wise shift logical left of integer (op1=op2<<op3)
0x003a ishr       {REG,REG,REG}        bit wise shift logical right of integer (op1=op2>>op3)
0x003b ishr       {REG,REG,INT}        bit wise shift logical right of integer (op1=op2>>op3)
0x0005 isub       {REG,REG,REG}        Integer Subtract (op1=op2-op3)
0x0006 isub       {REG,REG,INT}        Integer Subtract (op1=op2-op3)
0x0007 isub       {REG,INT,REG}        Integer Subtract (op1=op2-op3)
0x0155 itod       {REG}                Convert Integer to Decimal Number op1=s2dec(op2)
0x00db itof       {REG}                Set register float value from its int value
0x00d9 itos       {REG}                Set register string value from its int value
0x0036 ixor       {REG,REG,REG}        bit wise exclusive OR of 2 integers (op1=op2^op3)
0x0037 ixor       {REG,REG,INT}        bit wise exclusive OR of 2 integers (op1=op2^op3)
0x00c0 link       {REG,REG}            Link op2 to op1
0x00b3 linkarg    {REG,REG,INT}        Link args[op2+op3] to op1
0x00b2 linkarg    {REG,INT}            Link args[op2] to op1
0x00b4 linkattr   {REG,REG,REG}        Link attribute op3 of op2 to op1
0x00b5 linkattr   {REG,REG,INT}        Link attribute op3 of op2 to op1
0x00b6 linkattr1  {REG,REG,REG}        Link attribute op3 (1 base) of op2 to op1
0x00b7 linkattr1  {REG,REG,INT}        Link attribute op3 (1 base) of op2 to op1
0x00b8 linktoattr {REG,REG,REG}        Link op3 to attribute op1 of op2 
0x00b9 linktoattr {INT,REG,REG}        Link op3 to attribute op1 of op2 
0x00ba linktoattr1 {REG,REG,REG}        Link op3 to attribute op1 (1 base) of op2 
0x00bb linktoattr1 {INT,REG,REG}        Link op3 to attribute op1 (1 base) of op2 
0x00c7 load       {REG,REG}            Load op1 with op2
0x00c3 load       {REG,INT}            Load op1 with op2
0x00c4 load       {REG,FLOAT}          Load op1 with op2
0x00c6 load       {REG,CHAR}           Load op1 with op2
0x00c5 load       {REG,STRING}         Load op1 with op2
0x00c8 load       {REG,DECIMAL}        Load op1 with op2
0x00ca load       {INT,REG}            Load op1 with op2 (non symbolic registers)
0x00c9 load       {INT,INT}            Load op1 with op2 (non symbolic registers)
0x0109 loadsettp  {REG,INT,INT}        load register and sets the register type flag load op1=op2 (op1.typeflag = op3)
0x010a loadsettp  {REG,FLOAT,INT}      load register and sets the register type flag load op1=op2 (op1.typeflag = op3)
0x010b loadsettp  {REG,STRING,INT}     load register and sets the register type flag load op1=op2 (op1.typeflag = op3)
0x0092 map        {REG,REG}            Map op1 to var name in op2
0x0093 map        {REG,STRING}         Map op1 to var name op2
0x0180 metadecodeinst {REG,REG}            Decode opcode (op1 decoded op2)
0x0186 metalinkpreg {REG,REG}            Link parent-frame-register[op2] to op1
0x0187 metaloadcalleraddr {REG}                Load caller address object to op1
0x0185 metaloaddata {REG,REG,REG}        Load Metadata (op1 = (metadata)op2[op3])
0x017e metaloadedeprocs {REG,REG}            Loaded Exposed Procedures (op1 = array procedures in module op2)
0x017c metaloadedmodules {REG}                Loaded Modules (op1 = array loaded modules)
0x017d metaloadedprocs {REG,REG}            Loaded Procedures (op1 = array procedures in module op2)
0x0182 metaloadfoperand {REG,REG,REG}        Load Float Operand (op1 = (float)op2[op3])
0x017f metaloadinst {REG,REG,REG}        Load Instruction Code (op1 = (inst)op2[op3])
0x0181 metaloadioperand {REG,REG,REG}        Load Integer/Index Operand (op1 = (int)op2[op3])
0x017b metaloadmodule {REG,REG}            Load Module (op1 = module num of last loaded module in rxbin op2)
0x0184 metaloadpoperand {REG,REG,REG}        Load Procedure Operand (op1 = (proc)op2[op3])
0x0183 metaloadsoperand {REG,REG,REG}        Load String Operand (op1 = (string)op2[op3])
0x011f minattrs   {REG,REG}            ensure min number attributes op1.num_attributes >= op2
0x0121 minattrs   {REG,REG,INT}        ensure min number attributes op1.num_attributes >= op2 + op3
0x0120 minattrs   {REG,INT}            ensure min number attributes op1.num_attributes >= op2
0x0122 minattrs   {REG,INT,INT}        ensure min number attributes op1.num_attributes >= op2 + op3
0x00ab move       {REG,REG}            Move op2 to op1
0x0090 mtime      {REG}                Put time in microseconds into op1
0x0022 multf      {REG,REG,REG}        Convert and Multiply to Float (op1=op2*op3) (Deprecated)
0x0023 multf      {REG,REG,FLOAT}      Convert and Multiply to Float (op1=op2*op3) (Deprecated)
0x000c multi      {REG,REG,REG}        Convert and Multiply to Integer (op1=op2*op3) (Deprecated)
0x000d multi      {REG,REG,INT}        Convert and Multiply to Integer (op1=op2*op3) (Deprecated)
0x008e not        {REG,REG}            Logical (int) not op1=!op2
0x0098 nsmap      {REG,REG,REG}        Map op1 to namespace in op2 var name in op3
0x0099 nsmap      {REG,REG,STRING}     Map op1 to namespace in op2 var name op3
0x009b nsmap      {REG,STRING,REG}     Map op1 to namespace op2 var name in op3
0x009a nsmap      {REG,STRING,STRING}  Map op1 to namespace op2 var name op3
0x00c2 null       {REG}                Null op1
0x0129 nullredir  {REG}                Redirect op1 = to/from null
0x0110 opendll    {REG,REG,REG}        open DLL
0x008d or         {REG,REG,REG}        Logical (int) or op1=(op2 || op3)
0x00e8 padstr     {REG,REG,REG}        set op1=op2[repeated op3 times]
0x0094 pmap       {REG,REG}            Map op1 to parent var name in op2
0x0095 pmap       {REG,STRING}         Map op1 to parent var name op2
0x0052 poschar    {REG,REG,REG}        op1 = position of op3 in op2
0x00d2 readline   {REG}                Read Line to op1
0x0126 redir2arr  {REG,REG}            Redirect op1 -> array op2
0x0125 redir2str  {REG,REG}            Redirect op1 -> string op2
0x00a1 ret        no operand           Return VOID
0x00a2 ret        {REG}                Return op1
0x00a3 ret        {INT}                Return op1
0x00a4 ret        {FLOAT}              Return op1
0x00a5 ret        {CHAR}               Return op1
0x00a6 ret        {STRING}             Return op1
0x007c rseq       {REG,REG,REG}        non strict String Equals op1=(op2=op3)
0x007d rseq       {REG,REG,STRING}     non strict String Equals op1=(op2=op3)
0x0117 rxhash     {REG,REG,REG}        returns hash value, etc, op1=hash(op2,len(op3))
0x0114 rxvers     {REG}                get version, op1=version details
0x0046 sappend    {REG,REG}            String Append with space (op1=op1||op2)
0x00cb say        {REG}                Say op1
0x00ce say        {INT}                Say op1
0x00cf say        {FLOAT}              Say op1
0x00d1 say        {CHAR}               Say op1
0x00d0 say        {STRING}             Say op1
0x00cc sayx       {REG}                Say op1 without line feed
0x00cd sayx       {STRING}             Say op1 (as string) without line feed
0x003e sconcat    {REG,REG,REG}        String Concat with space (op1=op2||op3)
0x003f sconcat    {REG,REG,STRING}     String Concat with space (op1=op2||op3)
0x0040 sconcat    {REG,STRING,REG}     String Concat with space (op1=op2||op3)
0x00b0 scopy      {REG,REG}            Copy String op2 to op1
0x007a seq        {REG,REG,REG}        String Equals op1=(op2==op3)
0x007b seq        {REG,REG,STRING}     String Equals op1=(op2==op3)
0x011a setattrs   {REG,REG}            set number attributes op1.num_attributes = op2
0x011c setattrs   {REG,REG,INT}        set number attributes op1.num_attributes = op2 + op3
0x011b setattrs   {REG,INT}            set number attributes op1.num_attributes = op2
0x011d setattrs   {REG,INT,INT}        set number attributes op1.num_attributes = op2 + op3
0x014f setdgts    {REG}                Set Decimal Digits digits=op1
0x0150 setdgts    {INT}                Set Decimal Digits digits=op1
0x010c setortp    {REG,INT}            or the register type flag (op1.typeflag = op1.typeflag | op2)
0x0053 setstrpos  {REG,REG}            Set String (op1) charpos set to op2
0x0108 settp      {REG,INT}            sets the register type flag (op1.typeflag = op2)
0x0080 sgt        {REG,REG,REG}        String Greater than op1=(op2>op3)
0x0081 sgt        {REG,REG,STRING}     String Greater than op1=(op2>op3)
0x0082 sgt        {REG,STRING,REG}     String Greater than op1=(op2>op3)
0x0083 sgte       {REG,REG,REG}        String Greater than equals op1=(op2>=op3)
0x0084 sgte       {REG,REG,STRING}     String Greater than equals op1=(op2>=op3)
0x0085 sgte       {REG,STRING,REG}     String Greater than equals op1=(op2>=op3)
0x0145 sigbr      {ID,STRING}          Set Signal op2 Handle to Branch to op1
0x0146 sigcall    {FUNC,STRING}        Set Signal op2 Handle to Call op1
0x0147 sigcallbr  {ID,FUNC,STRING}     Set Signal op3 Handle to Call op2 returning to op1
0x0143 sighalt    {STRING}             Set Signal op1 Handle to Halt
0x0142 sigignore  {STRING}             Set Signal op1 Handle to Ignore
0x0138 signal     {STRING}             Signal type op1
0x013c signal     {STRING,REG}         Signal type op1 (payload op2)
0x013b signal     {STRING,STRING}      Signal type op1 (message op2)
0x013a signalf    {STRING,REG}         Signal type op1 if op2 false
0x013e signalf    {STRING,STRING,REG}  Signal type op1 (message op2) if op3 false
0x0139 signalt    {STRING,REG}         Signal type op1 if op2 true
0x013d signalt    {STRING,STRING,REG}  Signal type op1 (message op2) if op3 true
0x0148 sigret     {STRING}             Set Signal op1 Handle to Return
0x0144 sigshalt   {STRING}             Set Signal op1 Handle to Silent Halt
0x0086 slt        {REG,REG,REG}        String Less than op1=(op2<op3)
0x0087 slt        {REG,REG,STRING}     String Less than op1=(op2<op3)
0x0088 slt        {REG,STRING,REG}     String Less than op1=(op2<op3)
0x0089 slte       {REG,REG,REG}        String Less than equals op1=(op2<=op3)
0x008a slte       {REG,REG,STRING}     String Less than equals op1=(op2<=op3)
0x008b slte       {REG,STRING,REG}     String Less than equals op1=(op2<=op3)
0x007e sne        {REG,REG,REG}        String Not equals op1=(op2!=op3)
0x007f sne        {REG,REG,STRING}     String Not equals op1=(op2!=op3)
0x0124 spawn      {REG,REG,REG}        Spawn Process op1 = exec op2 redirect op3
0x0152 stod       {REG}                Convert Decimal String to Decimal Number op1=s2dec(op2)
0x00de stof       {REG}                Set register float value from its string value
0x00df stoi       {REG}                Set register int value from its string value
0x0127 str2redir  {REG,REG}            Redirect op1 <- string op2
0x0050 strchar    {REG,REG}            op1 (as int) = op2[charpos]
0x004f strchar    {REG,REG,REG}        op1 (as int) = op2[op3]
0x004e strlen     {REG,REG}            String Length op1 = length(op2)
0x00e2 strlower   {REG,REG}            Set string to lower case value
0x00e3 strupper   {REG,REG}            Set string to upper case value
0x001d subf       {REG,REG,REG}        Convert and Subtract to Float (op1=op2-op3) (Deprecated)
0x001e subf       {REG,REG,FLOAT}      Convert and Subtract to Float (op1=op2-op3) (Deprecated)
0x001f subf       {REG,FLOAT,REG}      Convert and Subtract to Float (op1=op2-op3) (Deprecated)
0x0008 subi       {REG,REG,REG}        Convert and Subtract to Integer (op1=op2-op3) (Deprecated)
0x0009 subi       {REG,REG,INT}        Convert and Subtract to Integer (op1=op2-op3) (Deprecated)
0x00e7 substcut   {REG,REG}            set op1=substr(op1,,op2) cuts off op1 after position op3
0x0055 substr     {REG,REG,REG}        op1 = op2[charpos]...op2[charpos+op3-1]
0x00e6 substring  {REG,REG,REG}        set op1=substr(op2,op3) remaining string
0x00ac swap       {REG,REG}            Swap op1 and op2
0x008f time       {REG}                Put time into op1
0x00e4 transchar  {REG,REG,REG}        replace op1 if it is in op3-list by char in op2-list
0x0048 triml      {REG,REG}            Trim String (op1) from Left by (op2) Chars
0x004b triml      {REG,REG,REG}        Trim String (op2) from Left by (op3) Chars into op1
0x0049 trimr      {REG,REG}            Trim String (op1) from Right by (op2) Chars
0x004c trimr      {REG,REG,REG}        Trim String (op2) from Right by (op3) Chars into op1
0x004a trunc      {REG,REG}            Trunc String (op1) to (op2) Chars
0x004d trunc      {REG,REG,REG}        Trunc String (op2) to (op3) Chars into op1
0x00c1 unlink     {REG}                Unlink op1
0x00bc unlinkattr {REG,REG}            Unlink attribute op1 of op2
0x00bd unlinkattr {INT,REG}            Unlink attribute op1 of op2
0x00be unlinkattr1 {REG,REG}            Unlink attribute op1 (1 base) of op2
0x00bf unlinkattr1 {INT,REG}            Unlink attribute op1 (1 base) of op2
0x009c unmap      {REG}                Unmap op1
0x0091 xtime      {REG,STRING}         put special time properties into op1

