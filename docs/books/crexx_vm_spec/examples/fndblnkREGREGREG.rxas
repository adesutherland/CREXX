/* word
 * word: procedure = .string
 * arg string1 = .string, wordnum = .int
*/
         .globals=0
main()   .locals=13
    load r1,"The quick brown fox jumps over the lazy dog."
    load r2,4
    load  r3,0          /* offset in string                    */
    strlen r4,r1
    ieq   r12,r4,0      /* break out if zero length            */
    brt   break,r12
    load  r6,0          /* word count                          */
    load  r10,""        /* extracted word                      */
loop:
    fndnblnk r3,r1,r3   /* find first/next non blank offset    */
    ilt r5,r3,0         /* if <0, nothing found, end search    */
    brt break,r5
    inc r6              /* else increase word count            */
                        /* offset of word is in R3             */
    copy r8,r3          /* save offset of word                 */
    fndblnk r3,r1,r3    /* from offset find next blank offset  */
    ieq r7,r6,r2        /* is this the word we are looking for?*/
    brt wordf,r7        /* go and fetch it                     */
    ilt r5,r3,0         /* if <0, nothing found, end search    */
    brt break,r5        /* word not found                      */
    bct loop,r4,r3      /* cont. to look for next non blank    */
wordf:
    igt r5,r3,0         /* if <0 eos reached = -length(string) */
    brt isplus,r5       /* length of string is offset +1       */
    imult r3,r3,-1      /* make it positive                    */
isplus:
    isub r5,r3,r8       /* calculate length to extract         */
wordc:
    concchar r10,r1,r8  /* extract word char by char           */
    bct  wordc,r5,r8    /* ... until length counter is 0       */
break:
    say r10
    ret        * return to caller
