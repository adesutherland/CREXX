    /* please edit testbifs.mxas, which generates testbifs.rxas */
    #include "../../../tests/testskel.inc"
    
    length()   .expose=length.length
    substr()   .expose=substr.substr
    copies()   .expose=copies.copies
    reverse()  .expose=reverse.reverse
    word()     .expose=word.word
    words()    .expose=words.words
    wordindx() .expose=wordindx.wordindx
    subword()  .expose=subword.subword
    pos()      .expose=pos.pos
    lastpos()  .expose=lastpos.lastpos   
    right()    .expose=right.right
    left()     .expose=left.left

main() .locals=8
    call logo()

    /* the length function */
    say "Test Length function - string argument"
    load r3,1  /* there is one argument */
    load r4,"abcdefgh" /* 8, following the book */
    call r1,length(),r3
    ieq  r4,r1,8
    call r0,expect_true(),r3

    say "Test Length function - empty string argument"
    load r3,1 /* there is one argument */
    load r4,"" /* 0, following the book */
    call r1,length(),r3
    ieq  r4,r1,0
    call r0,expect_true(),r3

    /* the substr function */
    say "Test Substr function - one arg, start pos, no overrun"
    load r3,2  /* there are two arguments*/
    load r4,"1234567890"
    load r5,5 /* second argument, startpos */
    call r1,substr(),r3
    load r3,1
    load r5,"567890"
    seq  r4,r1,r5
    call r0,expect_true(),r3

    say "Test Substr function - overrun and pad"
    load r3,4  /* there are four arguments*/
    load r4,"1234567890"
    load r5,6 /* second argument, startpos */
    load r6,6 /* third argument, length */
    load r7,"." /* fourth argument, pad */
    call r1,substr(),r3
    load r3,1
    seq  r4,r1,"67890."
    call r0,expect_true(),r3
    
    /* the first example from the book, SUBSTR('abc',2) == 'bc' */
    say "Test Substr function - no overrun, no pad"
    load r3,2  /* there are two arguments*/
    load r4,"abc"
    load r5,2 /* second argument, startpos */
    call r1,substr(),r3
    load r3,1
    seq  r4,r1,"bc"
    call r0,expect_true(),r3

    /* the second example from the book, SUBSTR('abc',2,4) == 'bc  ' */
    say "Test Substr function - overrun, default pad"
    load r3,3  /* there are three arguments*/
    load r4,"abc"
    load r5,2 /* second argument, startpos */
    load r6,4 /* third argument, length */
    call r1,substr(),r3
    load r3,1
    seq r4,r1,"bc  "
    call r0,expect_true(),r3
    
    /* the third example from the book, SUBSTR('abc',2,4,'.') == 'bc....' */
    say "Test Substr function - overrun, pad not default"
    load r3,4  /* there are four arguments*/
    load r4,"abc"
    load r5,2 /* second argument, startpos */
    load r6,4 /* third argument, length */
    load r7,"." /* fourth argument, pad */
    call r1,substr(),r3
    load r3,1
    seq r4,r1,"bc.."
    call r0,expect_true(),r3

    /* test of substr shorter than max, SUBSTR('abc',1,2,'.') == 'ab' */
    say "Test Substr function - shorter than max, pad not default, unused"
    load r3,4  /* there are four arguments*/
    load r4,"abcdefgh"
    load r5,1 /* second argument, startpos */
    load r6,2 /* third argument, length */
    load r7,"." /* fourth argument, pad */
    call r1,substr(),r3
    load r3,1
    seq r4,r1,"ab"
    call r0,expect_true(),r3

    /* an example with unicode pad, SUBSTR('abc',2,6,'.') == 'bc....' */
    say "Test Substr function - unicode pad "
    load r3,4  /* there are four arguments*/
    load r4,"abc"
    load r5,2 /* second argument, startpos */
    load r6,6 /* third argument, length */
    load r7,"é" /* fourth argument, pad */
    call r1,substr(),r3
    load r3,1
    seq r4,r1,"bcéééé"
    call r0,expect_true(),r3

    /* copies */
    /* the first example from the book, COPIES('abc',3) == 'abcabcabc' */
    say "Test Copies function"
    load r3,2  /* there are two arguments*/
    load r4,"abc"
    load r5,3 /* second argument, repeat */
    call r1,copies(),r3
    load r3,1
    seq r4,r1,"abcabcabc"
    call r0,expect_true(),r3

    /* the second example from the book, COPIES('abc',0) == '' */
    say "Test of copies function, zero copies"
    load r3,2  /* there are two arguments*/
    load r4,"abc"
    load r5,0 /* second argument, repeat */
    call r1,copies(),r3
    load r3,1
    seq r4,r1,""
    call r0,expect_true(),r3
 
    /* right */
    say "Test of Right function, 2 args"
    /* the first example from the book, RIGHT('abc d',8) == 'abc d   ' */
    load r3,2  /* there are two arguments*/
    load r4,"abc  d"
    load r5,8 /* second argument, length */
    call r1,right(),r3
    load r3,1
    seq r4,r1,"  abc  d"
    call r0,expect_true(),r3

    /* the second example from the book, RIGHT('abc d',8,'.') == 'abc d...' */
    say "Test of Right function, 3 args"
    load r3,3  /* there are three arguments*/
    load r4,"abc  d"
    load r5,8 /* second argument, length */
    load r6,"." /* third argument, pad */
    call r1,right(),r3
    load r3,1
    seq r4,r1,"..abc  d"
    call r0,expect_true(),r3
    
    /* the third example from the book, RIGHT('12',5,0) == '00012' */
    say "Test of Right function, 3 args"
    load r3,3  /* there are three arguments*/
    load r4,"12"
    load r5,5 /* second argument, length */
    load r6,"0" /* third argument, pad */
    call r1,right(),r3
    load r3,1
    seq r4,r1,"00012"
    call r0,expect_true(),r3

    /* a test for the substring (non-copies concatenate ), returns 'fox' */
    say "Test of Right function, non-copies concatenate version"
    load r3,2  /* there are two arguments*/
    load r4,"the quick brown fox"
    load r5,3 /* second argument, length */
    call r1,right(),r3
    load r3,1
    seq r4,r1,"fox"
    call r0,expect_true(),r3
    
    /* a test for the substring (non-copies concatenate , returns 'uvwxyz' */
    say "Test of Right function, non-copies concatenate version"
    load r3,2  /* there are two arguments*/
    load r4,"abcdefghijklmnopqrstuvwxyz"
    load r5,6 /* second argument, length */
    call r1,right(),r3
    load r3,1
    seq r4,r1,"uvwxyz"
    call r0,expect_true(),r3

    /* left */
    /* the first example from the book, LEFT('abc d',8) == 'abc d   ' */
    say "Test of Left function, no pad"
    load r3,2  /* there are two arguments */
    load r4,"abc d"
    load r5,8 /* second argument, length */
    call r1,left(),r3
    load r3,1
    seq r4,r1,"abc d   "
    call r0,expect_true(),r3
        
    /* the second example from the book, LEFT('abc d',8,'.') == 'abc d...' */
    say "Test of Left function, pad"
    load r3,3 /* there are three arguments*/
    load r4,"abc d"
    load r5,8 /* second argument, length */
    load r6,"." /* third argument, pad */
    call r1,left(),r3
    load r3,1
    seq r4,r1,"abc d..."
    call r0,expect_true(),r3
    
    /* the third example from the book, LEFT('abc  def',7) == 'abc de' */
    say "Test of Left function, short"
    load r3,2  /* there are two arguments*/
    load r4,"abc  def"
    load r5,7 /* second argument, length */
    call r1,left(),r3
    load r3,1
    seq r4,r1,"abc  de"
    call r0,expect_true(),r3
    
    /* reverse */
    say "Test Reverse"
    load r3,1  /* there is one argument */
    load r4,"The quick brown fox jumps over the lazy dog"
    call r1,reverse(),r3
    seq r4,r1,"god yzal eht revo spmuj xof nworb kciuq ehT"
    call r0,expect_true(),r3
    
    say "Test words"
    load r3,1  /* there is one argument */
    load r4,"The quick brown fox jumps over the lazy dog"
    say r4
    call r1,words(),r3
    load r3,1
    ieq r4,r1,9
    call r0,expect_true(),r3

    /* word */
    say "Test word: 7"
    load r3,2  /* there are two arguments*/
    load r4,"The quick brown fox jumps over the lazy dog"
    say  r4
    load r5,7  /* fetch 7. word */
    call r1,word(),r3
    load r3,1
    seq r4,r1,"the"
    call r0,expect_true(),r3

    /* wordindx */
    say "Test wordindx: 4"
    load r3,2  /* there are two arguments*/
    load r4,"The quick brown fox jumps over the lazy dog"
    say  r4
    load r5,4  /* pos of 4. word */
    call r1,wordindx(),r3
    load r3,1
    ieq r4,r1,17
    call r0,expect_true(),r3

    /* subword */
    say "Test subword: 5"
    load r3,2  /* there are two arguments*/
    load r4,"The quick brown fox jumps over the lazy dog"
    say r4
    load r5,5  /* start with 5 word */
    call r1,subword(),r3
    load r3,1
    seq r4,r1,"jumps over the lazy dog"
    call r0,expect_true(),r3

    /* Test pos */
    say "Test pos"
    load r3,3  /* there are 3 arguments */
    load r4,"!"
    load r5,"The quick brown fox jumps over the lazy(!) dog"
    load r6,1   /* offset to search */
    call r1,pos(),r3
    load r3,1
    ieq r4,r1,41
    call r0,expect_true(),r3

    /* we miss pos with one argument */
    
    /* Test Lastpos */
    say "Test lastpos"
    load r3,2 /* there are 2 arguments */
    load r4,"!"
    load r5,"The quick brown fox jumps over the lazy ! dog"
    call r1,lastpos(),r3
    load r3,1
    ieq r4,r1,41
    call r0,expect_true(),r3

    /* finished; print the results */
    call print_results()
    
    exit
