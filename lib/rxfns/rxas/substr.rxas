/* 
 * rexx SUBSTR bif in rxas. Uses length.rxas
 * rudimentary error checking
 */
.globals=0
length()  .expose=global.length          
substr()  .locals=20 .expose=global.substr
    /* string    = arg1    */
    /* n (start) = arg2    */
    load  r8," "        /* the default pad character */
    ilt   r11,a0,2      /* less than 2 arguments     */
    brt   wrongargs,r11
    igt   r11,a0,4      /* more than 4 arguments     */
    brt   wrongargs,r11
    ieq   r11,a0,2
    brt   argok,r11     /* we have two arguments     */
    /* we have 3 or 4 arguments */
    copy  r5,a3         /* save length field         */
    ieq   r11,a0,4
    brf   argok,r11 /* we do not have 4 args, no pad */
    copy  r8,a4  /* we have pad, replace default one */
    br    argok
wrongargs:
    /* we are here if there are not enough, or too many arguments */
    say "substr needs at least two and at most 4 arguments"
    exit
argok:
    copy  r4,a2
    /* we want to know the length of the string argument */
    copy  r1,a1
    load  r17,1 /* there is one argument for the call to length() */
    copy  r18,r1 /* and it is the string in r1 */
    call  r6,length(),r17 /* what is the length of the string arg */
    /* now loop characters from a1 from start pos in a2 to (length) r1 */
    ieq r11,r5,0 /* if req length = 0 */
    brf substr,r11
    copy r5,r6   /* req length := maxlength */
substr:
    iadd r12,r4,r5      /* max offset length=offset+requested length */
    dec  r12
    igte r11,r6,r12     /* requested length <= maxlength?     */
    brt  lenok,r11      /* if true skip padding size check    */
    isub r7,r12,r6      /* calculate padding size             */
    isub r5,r5,r7       /* reduce to maxlen                   */
lenok:
    dec  r4
loop:
    concchar r14,r1,r4
    bct   loop,r5,r4    /* loop inc r4 and dec r5  */
    ieq  r11,r7,0       /* check if we need to pad */
    brt  end,r11        /* we do not               */
pad:
    concat r14,r14,r8   /* concat pad in r8 to r14 */
    bct   pad,r7        /* loop back until r7 = 0  */
end:
    ret   r14
    exit
                
    
