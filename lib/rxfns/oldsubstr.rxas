/* 
 * rexx SUBSTR bif in rxas. Uses length.rxas
 * rudimentary error checking
 */

          .globals=0
length()  .expose=global.length          
substr()  .locals=18 .expose=global.substr
          /* string    = arg1    */
          /* n (start) = arg2    */
          load  r7," " /* the default pad character */
          load  r6,0   /* the length field initialized to 0 */
          ilt   r1,a0,2 /* less than 2 arguments */
          brt   wrongargs,r1
          igt   r1,a0,4 /* more than 4 arguments */
          brt   wrongargs,r1
          ieq   r1,a0,2
          brt   doit,r1 /* we have two arguments */
          /* we have 3 or 4 arguments */
          copy  r6,a3 /* save length field in r6*/
          ieq   r1,a0,4
          brf   doit,r1 /* we do not have 4 arguments, no pad */
          copy  r7,a4  /* we have a pad, replace the default one */
          br    doit
wrongargs:
          /* we are here if there are not enough, or too many arguments */
          say "substr needs at least two and at most 4 arguments"
          exit
doit:
          /* we want to know the length of the string argument */
          load  r3,1 /* there is one argument for the call to length() */
          copy  r4,a1 /* and it is the string in a1 */
          call  r10,length(),r3 /* what is the length of the string arg */
          copy  r12,r10 /* the preliminary loop counter is the strlength */
          dec   a2
          /* if r6 is nonzero, we have a length argument, a2:=r8+1 */
          igt   r1,r6,0
          brf   skip,r1
          copy  r12,r6 /* the final loop counter is the length argument */
          iadd  r12,r12,a2 /* adapt for start position */
skip:    
          /* now loop characters from a1 from the start pos in a2 to (length) r1 */
          load  r14,"" /* we are going to return this so initialize it */
          dec r10        
loop:
          /* a2: int argument 2, start position */
          /* r4: string argument1, string */
          /* r7: the pad character */
          /* r10:int length of arg */
          /* r12: loop counter */
          /* r13: receive integer of r4[a2] */
          /* r14: return result from function */
          strchar r13,r4,a2
          appendchar r14,r13 
          inc   a2 /* increment loop index */
          igte  r11,a2,r12
          brt   endloop,r11 /* jump out of the loop */
          igt   r16,a2,r10 /* are we past end of string ? */
          brt   pad,r16 
          br    loop
pad:
          concat r14,r14,r7  /* we are past length, cat pad */
          inc   a2
          igte  r11,a2,r12
          brt   endloop,r11 /* jump out of the loop */
          br    pad
Endloop:
          ret   r14
          exit
          
