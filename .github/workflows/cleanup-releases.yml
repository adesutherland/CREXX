# .github/workflows/cleanup-releases.yml
name: Cleanup Old Snapshot Releases

# This workflow is triggered whenever a release is 'published'.
on:
  release:
    types: [published]

# This job will perform the cleanup.
jobs:
  cleanup:
    name: Delete old snapshot releases
    runs-on: ubuntu-latest

    # This condition ensures the job only runs if the release was created from the 'develop' branch.
    if: github.event.release.target_commitish == 'develop'

    # The GITHUB_TOKEN needs write permissions for contents to be able to delete releases.
    permissions:
      contents: write

    steps:
      - name: Delete releases older than 30 days
        env:
          # The GITHUB_TOKEN is required for the GitHub CLI to authenticate.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # The name of the releases you want to target for cleanup.
          RELEASE_NAME_TO_CLEAN: "Development Snapshot"
        run: |
          # The number of days to keep the releases for.
          AGE_LIMIT_DAYS=30
          echo "Checking for releases named '$RELEASE_NAME_TO_CLEAN' older than $AGE_LIMIT_DAYS days..."

          # Calculate the cutoff date in Unix timestamp format.
          CUTOFF_SECONDS=$(date -d "-$AGE_LIMIT_DAYS days" +%s)

          # Use the GitHub CLI to list releases, filtering by name and getting their creation date and tag.
          # We use 'jq' to parse the JSON output and then loop through the results.
          gh release list --json name,tagName,createdAt --jq '.[] | select(.name == env.RELEASE_NAME_TO_CLEAN)' | \
          jq -c '.' | \
          while read -r release_json; do
            tag=$(echo "$release_json" | jq -r '.tagName')
            createdAt=$(echo "$release_json" | jq -r '.createdAt')

            # Convert the release creation date to a Unix timestamp.
            release_seconds=$(date -d "$createdAt" +%s)

            # Compare the release timestamp with the cutoff timestamp.
            if (( release_seconds < CUTOFF_SECONDS )); then
              echo "Deleting release with tag '$tag' (created on $createdAt)..."
              # Delete the release and its associated git tag.
              gh release delete "$tag" --yes --cleanup-tag
            else
              echo "Keeping release with tag '$tag' (created on $createdAt)..."
            fi
          done
          
          echo "Cleanup complete."