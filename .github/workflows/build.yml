name: Build CREXX

on: [push]

jobs:

  #**************************************************#
  build-ubuntu:
    name: Build for Ubuntu
    runs-on: [ubuntu-latest]

    steps:
      - name: Determine Release Name
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "RELEASE_ID=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/heads/master ]]; then
          echo "RELEASE_ID=release_candidate" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/heads/develop ]]; then
          echo "RELEASE_ID=dev-snapshot" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" =~ ^refs/heads/feature/.*$ ]]; then
          echo "RELEASE_ID=${GITHUB_REF#refs/heads/feature/}" >> $GITHUB_ENV
          else
          echo "Skip release"
          fi

      - name: Get Regina
        run: |
          sudo apt-get install --no-install-recommends -y regina-rexx
        shell: bash

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: CMAKE Build Debug
        uses: lukka/run-cmake@v3
        with:
          # Select the build configuration, typically Debug or Release.
          cmakeBuildType: Debug # optional, default is Debug
          buildDirectory: "${{ runner.temp }}/debug"

      - name: CMAKE Build Release
        uses: lukka/run-cmake@v3
        with:
          # Select the build configuration, typically Debug or Release.
          cmakeBuildType: MinSizeRel # optional, default is Debug
          buildDirectory: "${{ runner.temp }}/release"

      - name: Get Executables
        run: |
          mkdir -p "${{ runner.temp }}/exe"
          mkdir -p "${{ runner.temp }}/exe/release"
          mkdir -p "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/release/compiler/rxc"       "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/assembler/rxas"     "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/disassembler/rxdas" "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/debugger/rxdb"      "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/rxvm"   "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/rxbvm"  "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/rxvme"  "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/rxbvme" "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/librxbvml.a"  "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/librxvml.a"   "${{ runner.temp }}/exe/release"          
          cp "${{ runner.temp }}/debug/compiler/rxc"         "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/assembler/rxas"       "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/disassembler/rxdas"   "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/debugger/rxdb"        "${{ runner.temp }}/exe/debug"          
          cp "${{ runner.temp }}/debug/interpreter/rxvm"     "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/rxbvm"    "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/rxvme"    "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/rxbvme"   "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/librxbvml.a"  "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/librxvml.a"   "${{ runner.temp }}/exe/debug"
          cp LICENSE     "${{ runner.temp }}/exe"
          cp README.md   "${{ runner.temp }}/exe"
          cp SECURITY.md "${{ runner.temp }}/exe"
          cp history.txt "${{ runner.temp }}/exe"
        shell: bash

      - name: Sanity Check
        working-directory: ${{ runner.temp }}/exe
        run: |
          ./release/rxc -v
          ./release/rxas -v
          ./release/rxdas -v
          ./release/rxdb -v
          ./release/rxvm -v
          ./release/rxbvm -v
          ./release/rxvme -v
          ./release/rxbvme -v
          ./debug/rxc -v
          ./debug/rxas -v
          ./debug/rxdas -v
          ./debug/rxdb -v
          ./debug/rxvm -v
          ./debug/rxbvm -v
          ./debug/rxvme -v
          ./debug/rxbvme -v
        shell: bash

      - name: Upload Executable
        if: env.RELEASE_ID
        uses: actions/upload-artifact@v4
        with:
          name: CREXX-Ubuntu
          path: |
            ${{ runner.temp }}/exe
            ${{ runner.temp }}/exe/debug
            ${{ runner.temp }}/exe/release

      - name: Upload instrmiss.h
        uses: actions/upload-artifact@v4
        with:
          name: instrmiss.h
          path: ${{ runner.temp }}/release/machine/instrmiss.h

      - name: Upload instrset.h
        uses: actions/upload-artifact@v4
        with:
          name: instrset.h
          path: ${{ runner.temp }}/release/machine/instrset.h

      - name: Upload rxasscan.c
        uses: actions/upload-artifact@v4
        with:
          name: rxasscan.c
          path: ${{ runner.temp }}/release/assembler/rxasscan.c

      - name: Upload rxasgrmr.c
        uses: actions/upload-artifact@v4
        with:
          name: rxasgrmr.c
          path: ${{ runner.temp }}/release/assembler/rxasgrmr.c

      - name: Upload rxasgrmr.h
        uses: actions/upload-artifact@v4
        with:
          name: rxasgrmr.h
          path: ${{ runner.temp }}/release/assembler/rxasgrmr.h

      - name: Upload rxcposcn.c
        uses: actions/upload-artifact@v4
        with:
          name: rxcposcn.c
          path: ${{ runner.temp }}/release/compiler/rxcposcn.c

      - name: Upload rxcpopgr.c
        uses: actions/upload-artifact@v4
        with:
          name: rxcpopgr.c
          path: ${{ runner.temp }}/release/compiler/rxcpopgr.c

      - name: Upload rxcpopgr.h
        uses: actions/upload-artifact@v4
        with:
          name: rxcpopgr.h
          path: ${{ runner.temp }}/release/compiler/rxcpopgr.h

      - name: Upload rexbscan.c
        uses: actions/upload-artifact@v4
        with:
          name: rexbscan.c
          path: ${{ runner.temp }}/release/compiler/rexbscan.c

      - name: Upload rxcpbgmr.c
        uses: actions/upload-artifact@v4
        with:
          name: rxcpbgmr.c
          path: ${{ runner.temp }}/release/compiler/rxcpbgmr.c

      - name: Upload rxcpbgmr.h
        uses: actions/upload-artifact@v4
        with:
          name: rxcpbgmr.h
          path: ${{ runner.temp }}/release/compiler/rxcpbgmr.h

#**************************************************#
  build-windows:
    name: Build for Windows
    runs-on: [windows-latest]
    needs: [build-ubuntu]

    steps:
    - name: Update Toolchain (MSYS2)
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          git
          make
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p    

    - name: Determine Release Name
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
        echo "RELEASE_ID=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == refs/heads/master ]]; then
        echo "RELEASE_ID=release_candidate" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == refs/heads/develop ]]; then
        echo "RELEASE_ID=dev_snapshot" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" =~ ^refs/heads/feature/.*$ ]]; then
        echo "RELEASE_ID=${GITHUB_REF#refs/heads/feature/}" >> $GITHUB_ENV
        else
        echo "Skip release"
        fi
      shell: bash

    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Download instrmiss.h
      uses: actions/download-artifact@v4
      with:
        name: instrmiss.h
        path: machine

    - name: Download instrset.h
      uses: actions/download-artifact@v4
      with:
        name: instrset.h
        path: machine

    - name: Build Debug
      shell: msys2 {0}
      run: |
        cmake -G Ninja -B "${{ runner.temp }}/debug" -DCMAKE_BUILD_TYPE=Debug
        cmake --build "${{ runner.temp }}/debug"

    - name: Build Release
      shell: msys2 {0}
      run: |
        cmake -G Ninja -B "${{ runner.temp }}/release" -DCMAKE_BUILD_TYPE=MinSizeRel
        cmake --build "${{ runner.temp }}/release"

    - name: Get Executable
      run: |
        mkdir -p "${{ runner.temp }}/exe"
        mkdir -p "${{ runner.temp }}/exe/release"
        mkdir -p "${{ runner.temp }}/exe/debug"      
        cp "${{ runner.temp }}/release/compiler/rxc.exe"       "${{ runner.temp }}/exe/release"
        cp "${{ runner.temp }}/release/assembler/rxas.exe"     "${{ runner.temp }}/exe/release"
        cp "${{ runner.temp }}/release/disassembler/rxdas.exe" "${{ runner.temp }}/exe/release"
        cp "${{ runner.temp }}/release/debugger/rxdb.exe"      "${{ runner.temp }}/exe/release"
        cp "${{ runner.temp }}/release/interpreter/rxvm.exe"   "${{ runner.temp }}/exe/release"
        cp "${{ runner.temp }}/release/interpreter/rxbvm.exe"  "${{ runner.temp }}/exe/release"
        cp "${{ runner.temp }}/release/interpreter/rxvme.exe"  "${{ runner.temp }}/exe/release"
        cp "${{ runner.temp }}/release/interpreter/rxbvme.exe" "${{ runner.temp }}/exe/release"
        cp "${{ runner.temp }}/release/interpreter/librxbvml.a" "${{ runner.temp }}/exe/release"
        cp "${{ runner.temp }}/release/interpreter/librxvml.a"  "${{ runner.temp }}/exe/release"
        cp "${{ runner.temp }}/debug/compiler/rxc.exe"         "${{ runner.temp }}/exe/debug"
        cp "${{ runner.temp }}/debug/assembler/rxas.exe"       "${{ runner.temp }}/exe/debug"
        cp "${{ runner.temp }}/debug/disassembler/rxdas.exe"   "${{ runner.temp }}/exe/debug"
        cp "${{ runner.temp }}/debug/debugger/rxdb.exe"        "${{ runner.temp }}/exe/debug"
        cp "${{ runner.temp }}/debug/interpreter/rxvm.exe"     "${{ runner.temp }}/exe/debug"
        cp "${{ runner.temp }}/debug/interpreter/rxbvm.exe"    "${{ runner.temp }}/exe/debug"
        cp "${{ runner.temp }}/debug/interpreter/rxvme.exe"    "${{ runner.temp }}/exe/debug"
        cp "${{ runner.temp }}/debug/interpreter/rxbvme.exe"   "${{ runner.temp }}/exe/debug"
        cp "${{ runner.temp }}/debug/interpreter/librxbvml.a"  "${{ runner.temp }}/exe/debug"
        cp "${{ runner.temp }}/debug/interpreter/librxvml.a"   "${{ runner.temp }}/exe/debug"
        cp LICENSE "${{ runner.temp }}/exe"
        cp README.md "${{ runner.temp }}/exe"
        cp SECURITY.md "${{ runner.temp }}/exe"
        cp history.txt "${{ runner.temp }}/exe"
      shell: bash

    - name: Sanity Check
      working-directory: ${{ runner.temp }}/exe
      run: |
        ./release/rxc -v
        ./release/rxas -v
        ./release/rxdas -v
        ./release/rxdb -v
        ./release/rxvm -v
        ./release/rxbvm -v
        ./release/rxvme -v
        ./release/rxbvme -v
        ./debug/rxc -v
        ./debug/rxas -v
        ./debug/rxdas -v
        ./debug/rxdb -v
        ./debug/rxvm -v
        ./debug/rxbvm -v
        ./debug/rxvme -v
        ./debug/rxbvme -v
      shell: bash

    - name: Upload Executable
      if: env.RELEASE_ID
      uses: actions/upload-artifact@v4
      with:
        name: CREXX-Windows
        path: |
          ${{ runner.temp }}/exe
          ${{ runner.temp }}/exe/debug
          ${{ runner.temp }}/exe/release


  #**************************************************#
  build-macos:
    name: Build for MacOS
    runs-on: [macos-latest]
    needs: [build-ubuntu]

    steps:
      - name: Determine Release Name
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "RELEASE_ID=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/heads/master ]]; then
          echo "RELEASE_ID=release_candidate" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/heads/develop ]]; then
          echo "RELEASE_ID=dev_snapshot" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" =~ ^refs/heads/feature/.*$ ]]; then
          echo "RELEASE_ID=${GITHUB_REF#refs/heads/feature/}" >> $GITHUB_ENV
          else
          echo "Skip release"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Download instrmiss.h
        uses: actions/download-artifact@v4
        with:
          name: instrmiss.h
          path: machine

      - name: Download instrset.h
        uses: actions/download-artifact@v4
        with:
          name: instrset.h
          path: machine

      - name: CMAKE Build Debug
        uses: lukka/run-cmake@v3
        with:
          # Select the build configuration, typically Debug or Release.
          cmakeBuildType: Debug # optional, default is Debug
          buildDirectory: "${{ runner.temp }}/debug"

      - name: CMAKE Build Release
        uses: lukka/run-cmake@v3
        with:
          # Select the build configuration, typically Debug or Release.
          cmakeBuildType: MinSizeRel # optional, default is Debug
          buildDirectory: "${{ runner.temp }}/release"

      - name: Get Executable
        run: |
          mkdir -p "${{ runner.temp }}/exe"
          mkdir -p "${{ runner.temp }}/exe/release"
          mkdir -p "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/release/compiler/rxc"       "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/assembler/rxas"     "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/disassembler/rxdas" "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/debugger/rxdb"      "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/rxvm"   "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/rxbvm"  "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/rxvme"  "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/rxbvme" "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/librxbvml.a"  "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/release/interpreter/librxvml.a"   "${{ runner.temp }}/exe/release"
          cp "${{ runner.temp }}/debug/compiler/rxc"         "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/assembler/rxas"       "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/disassembler/rxdas"   "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/debugger/rxdb"        "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/rxvm"     "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/rxbvm"    "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/rxvme"    "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/rxbvme"   "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/librxbvml.a"  "${{ runner.temp }}/exe/debug"
          cp "${{ runner.temp }}/debug/interpreter/librxvml.a"   "${{ runner.temp }}/exe/debug"
          cp LICENSE "${{ runner.temp }}/exe"
          cp README.md "${{ runner.temp }}/exe"
          cp SECURITY.md "${{ runner.temp }}/exe"
          cp history.txt "${{ runner.temp }}/exe"
        shell: bash

      - name: Sanity Check
        working-directory: ${{ runner.temp }}/exe
        run: |
          ./release/rxc -v
          ./release/rxas -v
          ./release/rxdas -v
          ./release/rxdb -v
          ./release/rxvm -v
          ./release/rxbvm -v
          ./release/rxvme -v
          ./release/rxbvme -v
          ./debug/rxc -v
          ./debug/rxas -v
          ./debug/rxdas -v
          ./debug/rxdb -v
          ./debug/rxvm -v
          ./debug/rxbvm -v
          ./debug/rxvme -v
          ./debug/rxbvme -v
        shell: bash

      - name: Upload Executable
        if: env.RELEASE_ID
        uses: actions/upload-artifact@v4
        with:
          name: CREXX-MacOS
          path: |
            ${{ runner.temp }}/exe
            ${{ runner.temp }}/exe/debug
            ${{ runner.temp }}/exe/release

  #**************************************************#
  # This job runs after all builds are successful
  # and creates the snapshot release.
  #**************************************************#
  snapshot-release:
    name: Create Development Snapshot Release
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-windows, build-macos]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Generate Timestamp and Names
        id: names
        run: |
          echo "RELEASE_NAME=Development Snapshot" >> $GITHUB_ENV
          echo "TAG_NAME=dev-snapshot-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Zip Artifacts
        run: |
          zip -r CREXX-Ubuntu.zip artifacts/CREXX-Ubuntu
          zip -r CREXX-Windows.zip artifacts/CREXX-Windows
          zip -r CREXX-MacOS.zip artifacts/CREXX-MacOS

      - name: Create New Snapshot Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          prerelease: true
          files: |
            ./CREXX-Ubuntu.zip
            ./CREXX-Windows.zip
            ./CREXX-MacOS.zip

  #**************************************************#
  # This job runs AFTER the snapshot is made
  # and cleans up old ones.
  #**************************************************#
  cleanup-snapshots:
    name: Cleanup Old Snapshots
    runs-on: ubuntu-latest
    # This job must run after the snapshot release is successfully created
    needs: snapshot-release
    # This job also only runs on pushes to develop, just like the one it needs
    if: github.ref == 'refs/heads/develop'
    permissions:
      contents: write # Permission is needed here to delete releases
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Delete releases older than 30 days
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NAME_TO_CLEAN: "Development Snapshot"
        run: |
          AGE_LIMIT_DAYS=30
          echo "Checking for releases named '$RELEASE_NAME_TO_CLEAN' older than $AGE_LIMIT_DAYS days..."
          CUTOFF_SECONDS=$(date -d "-$AGE_LIMIT_DAYS days" +%s)
          gh release list --json name,tagName,createdAt --jq '.[] | select(.name == env.RELEASE_NAME_TO_CLEAN)' | \
          jq -c '.' | \
          while read -r release_json; do
            tag=$(echo "$release_json" | jq -r '.tagName')
            createdAt=$(echo "$release_json" | jq -r '.createdAt')
            release_seconds=$(date -d "$createdAt" +%s)
            if (( release_seconds < CUTOFF_SECONDS )); then
              echo "Deleting release with tag '$tag' (created on $createdAt)..."
              gh release delete "$tag" --yes --cleanup-tag
            else
              echo "Keeping release with tag '$tag' (created on $createdAt)..."
            fi
          done
          echo "Cleanup complete."

  #**************************************************#
  # This job runs for pushes to 'master'
  # and creates a release candidate.
  #**************************************************#
  release-candidate:
    name: Create Release Candidate
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-windows, build-macos]
    # Only run this job for pushes to the master branch
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Generate Timestamp and Names
        id: names
        run: |
          echo "RELEASE_NAME=Release Candidate" >> $GITHUB_ENV
          echo "TAG_NAME=rc-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Zip Artifacts
        run: |
          zip -r CREXX-Ubuntu.zip artifacts/CREXX-Ubuntu
          zip -r CREXX-Windows.zip artifacts/CREXX-Windows
          zip -r CREXX-MacOS.zip artifacts/CREXX-MacOS

      - name: Create New Release Candidate
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This is the user-facing title of the release.
          name: ${{ env.RELEASE_NAME }}
          # This is the underlying Git tag. It's unique for each run.
          tag_name: ${{ env.TAG_NAME }}
          # Mark it as a pre-release, which is appropriate for a candidate.
          prerelease: true
          files: |
            ./CREXX-Ubuntu.zip
            ./CREXX-Windows.zip
            ./CREXX-MacOS.zip