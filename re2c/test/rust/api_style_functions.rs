/* Generated by re2c */
// re2rust $INPUT -o $OUTPUT --no-unsafe

// Have to use Cell for cursor, otherwise borrow checker does not allow
// to have closures YYPEEK (that does immutable borrow of cursor) and
// YYSKIP (that does mutable borrow).
use std::cell::Cell;

#[allow(non_snake_case)]
fn lex(s: &[u8]) -> bool {
    let cur = Cell::new(0);
    let YYPEEK = || unsafe { *s.get_unchecked(cur.get()) };
    let YYSKIP = || { cur.set(cur.get() + 1); };


{
	#[allow(unused_assignments)]
	let mut yych : u8 = 0;
	let mut yystate : usize = 0;
	'yyl: loop {
		match yystate {
			0 => {
				yych = YYPEEK();
				YYSKIP();
				match yych {
					0x41 ..= 0x5A |
					0x61 ..= 0x7A => {
						yystate = 2;
						continue 'yyl;
					}
					_ => {
						yystate = 1;
						continue 'yyl;
					}
				}
			}
			1 => { return false; }
			2 => {
				yych = YYPEEK();
				match yych {
					0x30 ..= 0x39 |
					0x41 ..= 0x5A |
					0x61 ..= 0x7A => {
						YYSKIP();
						yystate = 2;
						continue 'yyl;
					}
					_ => {
						yystate = 3;
						continue 'yyl;
					}
				}
			}
			3 => { return true; }
			_ => {
				panic!("internal lexer error")
			}
		}
	}
}

}

fn main() {
    assert!(lex(b"qwerty42\0"));
}
