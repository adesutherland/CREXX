Re2c has a flexible interface that gives the user both the freedom and the responsibility
to define how the generated code interacts with the outer program.
There are two major options:

- **Pointer API**.
  It is also called "default API", since it was historically the first, and for a long time the only one.
  This is a more restricted API based on C pointer arithmetics.
  It consists of pointer-like primitives ``YYCURSOR``, ``YYMARKER``,
  ``YYCTXMARKER`` and ``YYLIMIT``, which are normally defined as pointers
  of type ``YYCTYPE*``.
  Pointer API is enabled by default for the C backend,
  and it cannot be used with other backends that do not have pointer arithmetics.

  |

- **Generic API**.
  This is a less restricted API that does not assume pointer semantics.
  It consists of primitives
  ``YYPEEK``,
  ``YYSKIP``,
  ``YYBACKUP``,
  ``YYBACKUPCTX``,
  ``YYSTAGP``,
  ``YYSTAGN``,
  ``YYMTAGP``,
  ``YYMTAGN``,
  ``YYRESTORE``,
  ``YYRESTORECTX``,
  ``YYRESTORETAG``,
  ``YYSHIFT``,
  ``YYSHIFTSTAG``,
  ``YYSHIFTMTAG`` and
  ``YYLESSTHAN``.
  For the C backend generic API is enabled with ``--input custom`` option or
  ``re2c:flags:input = custom;`` configuration;
  for the Go backend it is enabled by default.
  Generic API was added in version 0.14.
  It is intentionally designed to give the user as much freedom as possible
  in redefining the input model and the semantics of different actions performed
  by the generated code. As an example, one can override ``YYPEEK`` to check for
  the end of input before reading the input character, or do some logging, etc.

Generic API has two styles:

- **Function-like**.
  This style is enabled with ``re2c:api:style = functions;`` configuration,
  and it is the default for C backend. In this style API primitives should be
  defined as functions or macros with parentheses, accepting the necessary
  arguments. For example, in C the default pointer API can be defined in
  function-like style generic API as follows:

  .. code-block:: cpp

      #define  YYPEEK()                 *YYCURSOR
      #define  YYSKIP()                 ++YYCURSOR
      #define  YYBACKUP()               YYMARKER = YYCURSOR
      #define  YYBACKUPCTX()            YYCTXMARKER = YYCURSOR
      #define  YYRESTORE()              YYCURSOR = YYMARKER
      #define  YYRESTORECTX()           YYCURSOR = YYCTXMARKER
      #define  YYRESTORETAG(tag)        YYCURSOR = tag
      #define  YYLESSTHAN(len)          YYLIMIT - YYCURSOR < len
      #define  YYSTAGP(tag)             tag = YYCURSOR
      #define  YYSTAGN(tag)             tag = NULL
      #define  YYSHIFT(shift)           YYCURSOR += shift
      #define  YYSHIFTSTAG(tag, shift)  tag += shift

  |

- **Free-form**.
  This style is enabled with ``re2c:api:style = free-form;`` configuration, and
  it is the default for Go backend. In this style API primitives can be defined
  as free-form pieces of code, and instead of arguments they have interpolated
  variables of the form ``@@{name}``, or optionally just ``@@`` if there is only one
  argument. The ``@@`` text is called "sigil". It can be redefined to any other
  text with ``re2c:api:sigil`` configuration. For example, the default pointer API
  can be defined in free-form style generic API as follows:

  .. code-block:: cpp

      re2c:define:YYPEEK       = "*YYCURSOR";
      re2c:define:YYSKIP       = "++YYCURSOR";
      re2c:define:YYBACKUP     = "YYMARKER = YYCURSOR";
      re2c:define:YYBACKUPCTX  = "YYCTXMARKER = YYCURSOR";
      re2c:define:YYRESTORE    = "YYCURSOR = YYMARKER";
      re2c:define:YYRESTORECTX = "YYCURSOR = YYCTXMARKER";
      re2c:define:YYRESTORETAG = "YYCURSOR = ${tag}";
      re2c:define:YYLESSTHAN   = "YYLIMIT - YYCURSOR < @@{len}";
      re2c:define:YYSTAGP      = "@@{tag} = YYCURSOR";
      re2c:define:YYSTAGN      = "@@{tag} = NULL";
      re2c:define:YYSHIFT      = "YYCURSOR += @@{shift}";
      re2c:define:YYSHIFTSTAG  = "@@{tag} += @@{shift}";

