
The generated code interfaces with the outer program with the help of
*primitives* -- symbolic names that can be defined as variables, functions or
macros in the target language (collectively referred to as the **API**).
The definition of primitives is left for the user: this gives them both
freedom in customizing the lexer and responsibility to understand how it works.
Not all primitives have to be defined --- only those used by a given program.
The manual provides definitions for the most popular use cases. For a full list
of primitives and their meaning see the `API primitives`_ section.

.. _generic_api:

There are two API flavors that define the set of primitives used by re2c:

  **Pointer API**
    This API is based on C pointer arithmetic. It was historically the first,
    and for a long time the only one. It consists of pointer-like primitives
    ``YYCURSOR``, ``YYMARKER``, ``YYCTXMARKER``, ``YYLIMIT`` (which are normally
    defined as pointers of type ``YYCTYPE*``) and ``YYFILL``. This API is
    enabled by default for C, and it cannot be used with other backends that do
    not support pointer arithmetic.

  **Generic API**
    This API is more flexible. It consists generic operations and does not
    assume any particular implementation. The primitives are
    ``YYPEEK``,
    ``YYSKIP``,
    ``YYBACKUP``,
    ``YYBACKUPCTX``,
    ``YYSTAGP``,
    ``YYSTAGN``,
    ``YYMTAGP``,
    ``YYMTAGN``,
    ``YYRESTORE``,
    ``YYRESTORECTX``,
    ``YYRESTORETAG``,
    ``YYSHIFT``,
    ``YYSHIFTSTAG``,
    ``YYSHIFTMTAG``,
    ``YYLESSTHAN``
    and ``YYFILL``.
    For the C backend generic API is enabled with ``--api custom`` option or
    ``re2c:api = custom;`` configuration; for Go and Rust it is enabled by
    default. Generic API was added in version 0.14.

