/*
 * REXX ASSEMBLER TEST
 */

.globals=4                           * number of global registers - concept TBC

main()    .locals=5                  * begin exec here

          load r2,17
          inc r2
          say r2
          say "'INC \n"
          load r0,"my string"
          copy r1,r0
          say r1
          say "'Result\n"
          load r2,100
          load r1,41
          ine  r2,r0,r1
          say r2
          say "\n"
          isub r1,r0,45
          say r1
          exit
          inc0
          say r0
          say "\n"
          load r1,4711
          inc1
          say r1
          say "\n"
          load r2,1847
          inc2
          say r2
          say "\n"
          load r0,41
          dec0
          say r0
          say "\n"
          load r1,4711
          dec1
          say r1
          say "\n"
          load r2,1847
          dec2
          say r2
          say "\n"
*
          load r0," CREXX STRIP functions  "
          say "\n Original '"
          say r0
          say "'\n"
          load r1," "
          triml r0,r1
          say "\nLTrimmed '"
          say r0
          say "'\n"
          trimr r0,r1
          say "\nRTrimmed '"
          say r0
          say "'\n"
          exit

          say "number of arguments = "
          say a0
          say "\nArg 1 = "
          say a1                     * Print the first argument
          say "\n\n"

          * br test
          say "br test: "
          br l1
          load r0,"Failed\n"
          say r0
l1:       say "Success\n"

          * dec0 test
          load r0, 100
          dec0
          say "dec0 test (should return 99), returned: "
          say r0
          say "\n"

          * dec test
          load r1, 89
          dec r1
          say "dec test (should return 88), returned: "
          say r1
          say "\n"

          * brt test
          load r0,0
          say "brt test1: "
          brt brt1,r0
          say "Success\n"
          br brt2
brt1:     say "Failed\n"
brt2:     load r0,1
          say "brt test2: "
          brt brt3,r0
          say "Failed\n"
          br brt4
brt3:     say "Success\n"
brt4:

          * brf test
          load r0,1
          say "brf test1: "
          brf brf1,r0
          say "Success\n"
          br brf2
brf1:     say "Failed\n"
brf2:     load r0,0
          say "brf test2: "
          brf brf3,r0
          say "Failed\n"
          br brf4
brf3:     say "Success\n"
brf4:


          * call / ret tests
          say "Calling func_test1()\n"
          call func_test1()
          say "Returned\n"

          say "Calling func_test2()\n"
          load r1,"Failed\n"
          call r1,func_test2()
          say "Returned: "
          say r1
          say "\n"

          say "Calling func_test3()\n"
          call r1,func_test3()
          say "Returned (should be 1234): "
          say r1
          say "\n"

          say "Calling func_test4()\n"
          load r2, 2
          load r3, 10
          load r4, 20
          call r1,func_test4(),r2
          say "Returned (should be 30): "
          say r1
          say "\n"

          call move_test()

*
*                                      MIkeG test cases
*
*                                      test LOAD_REG_STRING
          say "\nStarting MIkeG test suite\n"
*                                      test IMULT_REG_REG_REG
          load r0,42
          load r1,2
          imult r2,r1,r0
          say r1
          say " * "
          say r0
          say " = "
          say r2
          say "\n"
*                                      test IMULT_REG_REG_INT
          load r1,42
          imult r2,r1,4
          say r1
          say " * 4 = "
          say r2
          say "\n"
*                                      test IADD_REG_REG_REG
          load r0,21
          load r1,21
          iadd r2,r1,r0
          say r1
          say " + "
          say r0
          say " = "
          say r2
          say "\n"
*                                      test IADD_REG_REG_INT
          load r1,42
          iadd r2,r1,42
          say r1
          say " + 42 = "
          say r2
          say "\n"
*
          * Loop Performance
          call loop()
          exit

func_test1()    .locals=1
                say " ... in func_test1(), now returning\n"
                ret

func_test2()    .locals=1
                say " ... in func_test2(), now returning\n"
                load r0, "Success\n"
                ret r0

func_test3()    .locals=0
                say " ... in func_test3(), now returning\n"
                ret 1234

func_test4()    .locals=1
                say " ... in func_test4(), args="
                say a0
                say "\n"
                iadd r0,a1,a2
                say "Now returning: "
                say r0
                say "\n"
                ret r0

move_test()     .locals=2
                say "move test: "
                load r0,"Success\n"
                move r1,r0
                say r1
                ret

loop()          .locals=4
                say "looping "
                time r1
*                load r0,10000000000
                load r0,5
                say r0
                say " times (may take a minute or so)\n"
loopstart:      brf loopend,r0
*                imaster r0
*                say r0
*                say "\n"
                dec0
                br loopstart
loopend:       time r2
                 say "loop finished in "
                isub r3,r2,r1
                say r3
                say " seconds\n"
                ret