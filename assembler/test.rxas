/*
 * REXX ASSEMBLER TEST
 */

.globals=4                           * number of global registers - concept TBC

main()    .locals=3                  * begin exec here
          say a1                     * Print the first argument
          say "\n\n"
          say "Calling func()\n"
          call func()
          say "Returned\n"

*
*                                      MIkeG test cases
*
*                                      test LOAD_REG_STRING
          say "\nStarting MIkeG test suite\n"
*                                      test IMULT_REG_REG_REG
          load r0,42
          load r1,2
          imult r2,r1,r0
          say r1
          say " * "
          say r0
          say " = "
          say r2
          say "\n"
*                                      test IMULT_REG_REG_INT
          load r1,42
          imult r2,r1,4
          say r1
          say " * 4 = "
          say r2
          say "\n"
*                                      test IADD_REG_REG_REG
          load r0,21
          load r1,21
          iadd r2,r1,r0
          say r1
          say " + "
          say r0
          say " = "
          say r2
          say "\n"
*                                      test IADD_REG_REG_INT
          load r1,42
          iadd r2,r1,42
          say r1
          say " + 42 = "
          say r2
          say "\n"
*
          exit

func()    .locals=1
          say " ... in func(), now returning\n"
          ret

/*
          call r1,f()
          iadd r2,r1,3               * Add 3
          imult r2,r2,a1             * Multiply with arg 1
          iadd r2,r2,g0              * Add global register 1
          say r2
          exit r2


f()       .loCals=3                  * void f()
          map    r1,"rexxVar"
          load   r1,"A Value"
          say a1
          call r1,g()
          ret r0

g()       .locals=6                  * void g()
          map    r1,"rexxVar"
STart:    isub  R2,r3,r4
          sprime r2
          sconcat r5, "Answer=",r2
          ieq r0,r3,5                * check loop termination condition
          brt done,r0                * br out if condition met (true)
          inc r3                     * Loop instructions
          br starT                   * branch back to top of loop
done:     move r0,r3                 * Move return to r0
          iadd r0,r0,100
          sconcat r5,r5," (done)\n"
          say r5
          ret "OK"
*/