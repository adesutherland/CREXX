/*
 * REXX ASSEMBLER TEST
 */

.globals=4                           * number of global registers - concept TBC

main()    .locals=5                  * begin exec here
          say "number of arguments = "
          say a0
          say "\nArg 1 = "
          say a1                     * Print the first argument
          say "\n\n"

          say "Calling func_test1()\n"
          call func_test1()
          say "Returned\n"

          say "Calling func_test2()\n"
          call r1,func_test2()
          say "Returned: "
          say r1
          say "\n"

          say "Calling func_test3()\n"
          call r1,func_test3()
          say "Returned (should be 1234): "
          say r1
          say "\n"

          say "Calling func_test4()\n"
          load r2, 2
          load r3, 10
          load r4, 20
          call r1,func_test4(),r2
          say "Returned (should be 30): "
          say r1
          say "\n"

          call move_test()

*
*                                      MIkeG test cases
*
*                                      test LOAD_REG_STRING
          say "\nStarting MIkeG test suite\n"
*                                      test IMULT_REG_REG_REG
          load r0,42
          load r1,2
          imult r2,r1,r0
          say r1
          say " * "
          say r0
          say " = "
          say r2
          say "\n"
*                                      test IMULT_REG_REG_INT
          load r1,42
          imult r2,r1,4
          say r1
          say " * 4 = "
          say r2
          say "\n"
*                                      test IADD_REG_REG_REG
          load r0,21
          load r1,21
          iadd r2,r1,r0
          say r1
          say " + "
          say r0
          say " = "
          say r2
          say "\n"
*                                      test IADD_REG_REG_INT
          load r1,42
          iadd r2,r1,42
          say r1
          say " + 42 = "
          say r2
          say "\n"
*
          exit

func_test1()    .locals=1
                say " ... in func_test1(), now returning\n"
                ret

func_test2()    .locals=1
                say " ... in func_test2(), now returning\n"
                load r0, "Success\n"
                ret r0

func_test3()    .locals=0
                say " ... in func_test3(), now returning\n"
                ret 1234

func_test4()    .locals=1
                say " ... in func_test4(), args="
                say a0
                say "\n"
                iadd r0,a1,a2
                say "Now returning: "
                say r0
                say "\n"
                ret r0

move_test()     .locals=2
                say "move test: "
                load r0,"Success\n"
                move r1,r0
                say r1
                ret
