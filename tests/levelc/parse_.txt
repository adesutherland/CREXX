/* https://github.com/vlachoudis/brexx/issues/8 #1 */
    Parse value '(inval1 inval2) outval' with '(' in1 in2 ')' out
    if in1 \== 'inval1' then say 'failed in test 1, in1=/' || in1 || '/'
    if in2 \== 'inval2' then say 'failed in test 1, in2=/' || in2 || '/'
    if out \== ' outval' then say 'failed in test 1, out=/' || out || '/'

/* https://github.com/vlachoudis/brexx/issues/8 #2 */
    Parse value '()' with '(' inner1 inner2 ')'
    if inner1 \== '' then say 'failed in test 2, inner1=/' || inner1 || '/'
    if inner2 \== '' then say 'failed in test 2, inner2=/' || inner2 || '/'

/* RAP 1 */
   Parse value 'UNIX COMMAND ./xxx.r brexx /bin/bash' with a b c d e './' f g h i j
   if a \== 'UNIX' then say 'failed in test 3, a=/' || a || '/'
   if b \== 'COMMAND' then say 'failed in test 3, b=/' || b || '/'
   if c \== '' then say 'failed in test 3, c=/' || c || '/'
   if d \== '' then say 'failed in test 3, d=/' || d || '/'
   if e \== '' then say 'failed in test 3, e=/' || e || '/'
   if f \== 'xxx.r' then say 'failed in test 3, f=/' || f || '/'
   if g \== 'brexx' then say 'failed in test 3, g=/' || g || '/'
   if h \== '/bin/bash' then say 'failed in test 3, h=/' || h || '/'
   if i \== '' then say 'failed in test 3, i=/' || i || '/'
   if j \== '' then say 'failed in test 3, j=/' || j || '/'

/* math.rex 1 */
   call math_1A 25, 2
   signal math_1B
   math_1A:
   parse arg N , precision
   return
   math_1B:
   if N \== 25 then say 'failed in test 4, N=/' || N || '/'
   if precision \== 2 then say 'failed in thest 4, precision=/' || precision || '/'

/* math.rex 2 */
   parse source . calltype .
   if calltype \== 'COMMAND' then say 'failed in test 5, calltype=/' || calltype || '/'

/* fdump.rex 1 */
   parse source . . myname .
   if right(myname, 11) \== 'parse_.exec' then say 'failed in test 6, myname=/' || myname || '/'

/* cvd.rex 1 */
   Parse value Date('S') with Century +2 .
   if left(Century, 2) \== '20' then say 'failed in test 7, Century=/' || Century || '/'

/* cvd.rex 2A */
   Parse value '11/09/1959' with Day '/' Month '/' Year
   if Day \== '11' then say 'failed in test 8, Day=/' || Day || '/'
   if Month \== '09' then say 'failed in test 8, Month=/' || Month || '/'
   if Year \== '1959' then say 'failed in test 8, Year=/' || Year || '/'

/* cvd.rex 2B */
   Parse value '11/09/1959' with Day . '/' Month . '/' Year .
   if Day \== '11' then say 'failed in test 8, Day=/' || Day || '/'
   if Month \== '09' then say 'failed in test 8, Month=/' || Month || '/'
   if Year \== '1959' then say 'failed in test 8, Year=/' || Year || '/'

/* cvd.rex 3 */
   Parse value '19760601' with Year +4 Month +2 Day
   if Day \== '01' then say 'failed in test 8, Day=/' || Day || '/'
   if Month \== '06' then say 'failed in test 8, Month=/' || Month || '/'
   if Year \== '1976' then say 'failed in test 8, Year=/' || Year || '/'

/* commas.rex 1 */
   Parse value '12345.678' with Integer '.' Decimal
   if Integer \== 12345 then say 'failed in test 9, Integer=/' || Integer || '/'
   if Decimal \== 678 then say 'failed in test 9, Decimal=/' || Decimal || '/'

/* commas.rex 2 */
   Parse value '12345' with Part1 +3 Part2
   if Part1 \== 123 then say 'failed in test 10, Part1=/' || Part1 || '/'
   if Part2 \== 45 then say 'failed in test 10, Part2=/' || Part2 || '/'

/* B2H 1 */
   call b2h_1A
   signal b2h_1B
   b2h_1A: procedure
   d = date('S')
   t = time('N')
   input = d t 
   parse var input ,
         today_yyyymmdd today_time,
               1   today_yyyy  5  today_month 7  today_day .,
               1 . today_hour ':' today_min  ':' today_sec .
   if today_yyyymmdd \== d then say 'failed in test 11, today_yyyymmdd=/' || today_yyyymmdd || '/'
   if today_time \== t then say 'failed in test 11, today_time=/' || today_time || '/'
   if today_yyyy \== substr(d,1,4) then say 'failed in test 11, today_yyyy=/' || today_yyyy || '/'
   if today_month \== substr(d,5,2) then say 'failed in test 11, today_month=/' || today_month || '/'
   if today_day \== substr(d,7) then say 'failed in test 11, today_day=/' || today_day || '/'
   if today_hour \== substr(t,1,2) then say 'failed in test 11, today_hour=/' || today_hour || '/'
   if today_min \== substr(t,4,2) then say 'failed in test 11, today_min=/' || today_min || '/'
   if today_sec \== substr(t,7) then say 'failed in test 11, today_sec=/' || today_sec || '/'
   return
   b2h_1B:
   
/* B2H 2 */
   call b2h_2A
   signal b2h_2B
   b2h_2A: procedure
   parse value '' with ,
     ?centertag ?outputl83 ?outputp83,
     Abbrev. abstract
   if ?centertag \== '' then say 'failed in test 12, ?centertag=/' || ?centertag || '/'
   if ?outputl83 \== '' then say 'failed in test 12, ?outputl83=/' || ?outputl83 || '/'
   if ?outputp83 \== '' then say 'failed in test 12, ?outputp83=/' || ?outputp83 || '/'
   if Abbrev.A \== '' then say 'failed in test 12, Abbrev.A=/' || Abbrev.A || '/'
   if Abbrev.42 \== '' then say 'failed in test 12, Abbrev.42=/' || Abbrev.42 || '/'
   if abstract \== '' then say 'failed in test 12, abstract=/' || abstract || '/'
   return
   b2h_2B:
   
   
/* B2H 3 */
   call b2h_3A
   signal b2h_3B
   b2h_3A: procedure
   parse value 1 with true,
     1 ?b2hreq 1 ?config. 1 ?cs. 1 ?dlfmt 1 ?figcaptop 1 ?figlistwanted
   key = 'FOO'
   if true \== 1 then say 'failed in test 13, true=/' || true || '/'
   if ?b2hreq \== 1 then say 'failed in test 13, ?b2hreq=/' || ?b2hreq || '/'
   if ?config.azerTy \== 1 then say 'failed in test 13, ?config.azerTy=/' || ?config.azerTy || '/'
   if ?config.key \== 1 then say 'failed in test 13, ?config.key=/' || ?config.key || '/'
   if ?cs.RaP \== 1 then say 'failed in test 13, ?cs.RaP=/' || ?cs.RaP || '/'
   if ?cs.666 \== 1 then say 'failed in test 13, ?cs.666=/' || ?cs.666 || '/'
   if ?dlfmt \== 1 then say 'failed in test 13, ?dlfmt=/' || ?dlfmt || '/'
   if ?figcaptop \== 1 then say 'failed in test 13, ?figcaptop=/' || ?figcaptop || '/'
   if ?figlistwanted \== 1 then say 'failed in test 13, ?figlistwanted=/' || ?figlistwanted || '/'
   return
   b2h_3B:
   
   
   
/* B2H 4 */
   call b2h_4A
   signal b2h_4B
   b2h_4A: procedure
   parse value 0 with false,
     1 ?!!gml,
     1 ?addressflag 1 ?addressprologflag 1 ?annot 1 ?appendix 1 ?artaltlabel
   if false \== 0 then say 'failed in test 14, false=/' || false || '/'
   if ?!!gml \== 0 then say 'failed in test 14, ?!!gml=/' || ?!!gml || '/'
   if ?addressflag \== 0 then say 'failed in test 14, ?addressflag=/' || ?addressflag || '/'
   if ?addressprologflag \== 0 then say 'failed in test 14, ?addressprologflag=/' || ?addressprologflag || '/'
   if ?annot \== 0 then say 'failed in test 14, ?annot=/' || ?annot || '/'
   if ?appendix \== 0 then say 'failed in test 14, ?appendix=/' || ?appendix || '/'
   if ?artaltlabel \== 0 then say 'failed in test 14, ?artaltlabel=/' || ?artaltlabel || '/'
   return
   b2h_4B:

/* B2H 5 */
   call b2h_5A
   signal b2h_5B
   b2h_5A: procedure
   parse value '<DL>,</DL>,<P><DT>,,<DD>,,',
     with  list.!dl.0.1 ',' list.!dl.0.2 ',' list.!dl.0.3 ',' list.!dl.0.4 ',',
           list.!dl.0.5 ',' list.!dl.0.6 ','
   if list.!dl.0.1 \== '<DL>' then say 'failed in test 15, list.!dl.0.1=/' || list.!dl.0.1 || '/'
   if list.!dl.0.2 \== '</DL>' then say 'failed in test 15, list.!dl.0.2=/' || list.!dl.0.2 || '/'
   if list.!dl.0.3 \== '<P><DT>' then say 'failed in test 15, list.!dl.0.3=/' || list.!dl.0.3 || '/'
   if list.!dl.0.4 \== '' then say 'failed in test 15, list.!dl.0.4=/' || list.!dl.0.4 || '/'
   if list.!dl.0.5 \== '<DD>' then say 'failed in test 15, list.!dl.0.5=/' || list.!dl.0.5 || '/'
   if list.!dl.0.6 \== '' then say 'failed in test 15, list.!dl.0.6=/' || list.!dl.0.6 || '/'
   return
   b2h_5B:
   
/* B2H 6A */
   /* Pre-existing BUG? LSKIPBLANKS vs. skipping '40'x? */
   call b2h_6A
   signal b2h_6B
   b2h_6A: procedure
   parse value '15'x '09'x '00'x '01'x 'FE'x 'FF'x '15FF15'x,
         with  nl    tab   x00   x01   xFE   xFF   omitrecord
   if nl \=='15'x then say 'failed in test 16, nl=/' || nl || '/'
   if tab \=='09'x then say 'failed in test 16, tab=/' || tab || '/'
   if x00 \=='00'x then say 'failed in test 16, x00=/' || x00 || '/'
   if x01 \=='01'x then say 'failed in test 16, x01=/' || x01 || '/'
   if xFE \=='fe'x then say 'failed in test 16, xFE=/' || xFE || '/'
   if xFF \=='ff'x then say 'failed in test 16, xFF=/' || xFF || '/'
   if omitrecord \=='15Ff15'x then say 'failed in test 16, omitrecord=/' || omitrecord || '/'
   return
   b2h_6B:
   
/* B2H 6B */
   /* Not using blank-separated parsing here makes B2H 6A work. */
   call b2h_6C
   signal b2h_6D
   b2h_6C: procedure
   parse value ('15'x || '/' || '09'x || '/' || '00'x || '/' || '01'x || '/' || 'FE'x || '/' || 'FF'x || '/' || '15FF15'x),
         with  nl '/'   tab  '/' x00 '/'  x01 '/'  xFE  '/' xFF '/'  omitrecord
   if nl \=='15'x then say 'failed in test 17, nl=/' || nl || '/'
   if tab \=='09'x then say 'failed in test 17, tab=/' || tab || '/'
   if x00 \=='00'x then say 'failed in test 17, x00=/' || x00 || '/'
   if x01 \=='01'x then say 'failed in test 17, x01=/' || x01 || '/'
   if xFE \=='fe'x then say 'failed in test 17, xFE=/' || xFE || '/'
   if xFF \=='ff'x then say 'failed in test 17, xFF=/' || xFF || '/'
   if omitrecord \=='15Ff15'x then say 'failed in test 17, omitrecord=/' || omitrecord || '/'
   return
   b2h_6D:
   
/* B2H 7 */
   x00 = '00'x
   parse value ('before' || '00'x || 'between' || '00'x || 'after') with tagnest1 (x00) tntag (x00) tagnest2
   
   if tagnest1 \== 'before' then say 'failed in test 18, tagnest1=/' || tagnest1 || '/'
   if tntag \== 'between' then say 'failed in test 18, tntag=/' || tntag || '/'
   if tagnest2 \== 'after' then say 'failed in test 18, tagnest2=/' || tagnest2 || '/'

/* ERR 1 */
   /* Pre-existing bug: WITH is allowed on *all* PARSEs, not just PARSE VALUE */
   x = 'My dog has fleas'
   parse var x with y
   if x == y then say 'failed in test 19, x=/' || x || '/, invalid "WITH" was ignored'
   
/* DELIM 1 */
   parse value '/middle1 middle2/after' with delimiter +1 middle1 middle2 middle3 (delimiter) after
   if delimiter \== '/' then say 'failed in test 20, delimiter=/' || delimiter || '/' 
   if middle1 \== 'middle1' then say 'failed in test 20, middle1=/' || middle1 || '/' 
   if middle2 \== 'middle2' then say 'failed in test 20, middle2=/' || middle2 || '/' 
   if middle3 \== '' then say 'failed in test 20, middle3=/' || middle3 || '/' 
   if after \== 'after' then say 'failed in test 20, after=/' || after || '/' 

/* TRL2 LIT 1 */
   parse value 'This is  the text which, I think,  is scanned.' with w1 ',' w2 ',' rest
   if w1 \== 'This is  the text which' then say 'failed in test 22, w1=/' || w1 || '/'
   if w2 \== ' I think' then say 'failed in test 22, w2=/' || w2 || '/'
   if rest \== '  is scanned.' then say 'failed in test 22, rest=/' || rest || '/'

/* TRL2 LIT 2 */
   parse value 'This is  the text which, I think,  is scanned.' with w1 ',' w2 ',' w3 ',' rest
   if w1 \== 'This is  the text which' then say 'failed in test 23, w1=/' || w1 || '/'
   if w2 \== ' I think' then say 'failed in test 23, w2=/' || w2 || '/'
   if w3 \== '  is scanned.' then say 'failed in test 23, w3=/' || w3 || '/'
   if rest \== '' then say 'failed in test 23, rest=/' || rest || '/'

/* TRL2 WORD 1 */
   parse value 'This is  the text which, I think,  is scanned.' with w1 w2 w3 rest ','
   if w1 \== 'This' then say 'failed in test 24, w1=/' || w1 || '/'
   if w2 \== 'is' then say 'failed in test 24, w2=/' || w2 || '/'
   if w3 \== 'the' then say 'failed in test 24, w3=/' || w3 || '/'
   if rest \== 'text which' then say 'failed in test 24, rest=/' || rest || '/'


/* TRL2 WORD 2 */
   parse value 'This is  the text which, I think,  is scanned.' with w1 ' ' w2 ' ' w3 ' ' rest ','
   if w1 \== 'This' then say 'failed in test 25, w1=/' || w1 || '/'
   if w2 \== 'is' then say 'failed in test 25, w2=/' || w2 || '/'
   if w3 \== '' then say 'failed in test 25, w3=/' || w3 || '/'
   if rest \== 'the text which' then say 'failed in test 25, rest=/' || rest || '/'

/* TRL2 DOT 1 */
   parse value 'This is  the text which, I think,  is scanned.' with . . . word4 .
   if word4 \== 'text' then say 'failed in test 25, word4=/' || word4 || '/'

/* TRL2 POS 1 */
   parse value 'This is  the text which, I think,  is scanned.' with s1 10 s2 20 s3
   if s1 \== 'This is  ' then say 'failed in test 26, s1=/' || s1 || '/'
   if s2 \== 'the text w' then say 'failed in test 26, s2=/' || s2 || '/'

/* TRL2 POS 2 */
   parse value 'This is  the text which, I think,  is scanned.' with s1 =10 s2 =20 s3
   if s1 \== 'This is  ' then say 'failed in test 26, s1=/' || s1 || '/'
   if s2 \== 'the text w' then say 'failed in test 26, s2=/' || s2 || '/'
   if s3 \== 'hich, I think,  is scanned.' then say 'failed in test 26, s3=/' || s3 || '/'

/* TRL2 POS 3 */
   parse value '123456789' with 3 w1 +3 w2 3 w3
   if w1 \== '345' then say 'failed in test 27, w1=/' || w1 || '/'
   if w2 \== '6789' then say 'failed in test 27, w2=/' || w2 || '/'
   if w3 \== '3456789' then say 'failed in test 27, w3=/' || w3 || '/'

/* TRL2 POS 4 */
   parse value 'hi mom!' with 1 w1 1 w2 1 w3
   if w1 \== 'hi mom!' then say 'failed in test 28, w1=/' || w1 || '/'
   if w2 \== 'hi mom!' then say 'failed in test 28, w2=/' || w2 || '/'
   if w3 \== 'hi mom!' then say 'failed in test 28, w3=/' || w3 || '/'

/* TRL2 POS 5 */
   opts= 'word1 prword2 word3'
   parse upper value ' 'opts with ' PR' +1 prword .
   if prword \== 'PRWORD2' then say 'failed in test 29, prword=/' || prword || '/'

/* TRL VARPAT 1 */
   input='L/look for/1 10'
   parse var input verb 2 delim +1 string (delim) rest
   if verb \== 'L' then say 'failed in test 30, verb=/' || verb || '/'
   if delim \== '/' then say 'failed in test 30, delim=/' || delim || '/'
   if string \== 'look for' then say 'failed in test 30, string=/' || string || '/'
   if rest \== '1 10' then say 'failed in test 30, rest=/' || rest || '/'

say 'PARSE OK'
