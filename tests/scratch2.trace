Options parser >> Input 'TK_OPTIONS' in state 0
Options parser >> Shift 'TK_OPTIONS', go to state 1
Options parser >> Return. Stack=[TK_OPTIONS]
Options parser >> Input 'TK_LEVELB' in state 1
Options parser >> Shift 'TK_LEVELB', go to state 10
Options parser >> Return. Stack=[TK_OPTIONS TK_LEVELB]
Options parser >> Input 'TK_EOC' in state 10
Options parser >> Reduce 4 [option ::= TK_LEVELB], pop back to state 1.
Options parser >> ... then shift 'option', go to state 4
Options parser >> Reduce 12 [option_list ::= option] without external action, pop back to state 1.
Options parser >> ... then shift 'option_list', go to state 2
Options parser >> Shift 'TK_EOC', go to state 17
Options parser >> Return. Stack=[TK_OPTIONS option_list TK_EOC]
Options parser >> Popping TK_EOC
Options parser >> Popping option_list
Options parser >> Popping TK_OPTIONS
Parser(B) >> Input 'TK_OPTIONS' in state 0
Parser(B) >> Shift 'TK_OPTIONS', go to state 81
Parser(B) >> Return. Stack=[TK_OPTIONS]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 81
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 244
Parser(B) >> Return. Stack=[TK_OPTIONS TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 244
Parser(B) >> Reduce 17 [option ::= TK_VAR_SYMBOL], pop back to state 81.
Parser(B) >> ... then shift 'option', go to state 242
Parser(B) >> Reduce 14 [option_list ::= option], pop back to state 81.
Parser(B) >> ... then shift 'option_list', go to state 91
Parser(B) >> Shift 'TK_EOC', go to state 209
Parser(B) >> Return. Stack=[TK_OPTIONS option_list TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 209
Parser(B) >> Reduce 13 [rexx_options ::= TK_OPTIONS option_list TK_EOC], pop back to state 0.
Parser(B) >> ... then shift 'rexx_options', go to state 2
Parser(B) >> Shift 'TK_LABEL', go to state 165
Parser(B) >> Return. Stack=[rexx_options TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 165
Parser(B) >> Shift 'TK_PROCEDURE', go to state 264
Parser(B) >> Return. Stack=[rexx_options TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 264
Parser(B) >> Shift 'TK_EQUAL', go to state 110
Parser(B) >> Return. Stack=[rexx_options TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 110
Parser(B) >> Shift 'TK_CLASS', go to state 263
Parser(B) >> Return. Stack=[rexx_options TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 263
Parser(B) >> Reduce 99 [class ::= TK_CLASS], pop back to state 110.
Parser(B) >> ... then shift 'class', go to state 310
Parser(B) >> Reduce 95 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 2.
Parser(B) >> ... then shift 'procedure', go to state 293
Parser(B) >> Reduce 43 [keyword_instruction ::= procedure], pop back to state 2.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 2.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 2.
Parser(B) >> ... then shift 'labeled_instruction', go to state 196
Parser(B) >> Reduce 19 [instruction_list ::= labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_ARG', go to state 80
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 80
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 239
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 239
Parser(B) >> Reduce 9 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 80.
Parser(B) >> ... then shift 'var_symbol', go to state 323
Parser(B) >> Shift 'TK_EQUAL', go to state 17
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 17
Parser(B) >> Shift 'TK_CLASS', go to state 263
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 263
Parser(B) >> Reduce 99 [class ::= TK_CLASS], pop back to state 17.
Parser(B) >> ... then shift 'class', go to state 258
Parser(B) >> Reduce 104 [argument ::= var_symbol TK_EQUAL class], pop back to state 80.
Parser(B) >> ... then shift 'argument', go to state 256
Parser(B) >> Reduce 101 [arg_list ::= argument], pop back to state 80.
Parser(B) >> ... then shift 'arg_list', go to state 262
Parser(B) >> Shift 'TK_COMMA', go to state 93
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 93
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 239
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 239
Parser(B) >> Reduce 9 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 93.
Parser(B) >> ... then shift 'var_symbol', go to state 323
Parser(B) >> Shift 'TK_EQUAL', go to state 17
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 17
Parser(B) >> Shift 'TK_CLASS', go to state 263
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 263
Parser(B) >> Reduce 99 [class ::= TK_CLASS], pop back to state 17.
Parser(B) >> ... then shift 'class', go to state 258
Parser(B) >> Reduce 104 [argument ::= var_symbol TK_EQUAL class], pop back to state 93.
Parser(B) >> ... then shift 'argument', go to state 261
Parser(B) >> Reduce 102 [arg_list ::= arg_list TK_COMMA argument], pop back to state 80.
Parser(B) >> ... then shift 'arg_list', go to state 262
Parser(B) >> Reduce 98 [arg ::= TK_ARG arg_list], pop back to state 9.
Parser(B) >> ... then shift 'arg', go to state 298
Parser(B) >> Reduce 38 [keyword_instruction ::= arg], pop back to state 9.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 9.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 9.
Parser(B) >> ... then shift 'labeled_instruction', go to state 208
Parser(B) >> Reduce 20 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_RETURN', go to state 21
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 97
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_PLUS' in state 97
Parser(B) >> Reduce 9 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 155
Parser(B) >> Reduce 155 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 164
Parser(B) >> Reduce 173 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Shift 'TK_PLUS', go to state 63
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_RETURN addition TK_PLUS]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 63
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 97
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_RETURN addition TK_PLUS TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 97
Parser(B) >> Reduce 9 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 63.
Parser(B) >> ... then shift 'var_symbol', go to state 155
Parser(B) >> Reduce 155 [term ::= var_symbol], pop back to state 63.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 63.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 63.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 63.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 63.
Parser(B) >> ... then shift 'multiplication', go to state 163
Parser(B) >> Reduce 174 [addition ::= addition TK_PLUS multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Reduce 188 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 191 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 213
Parser(B) >> Reduce 204 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 220
Parser(B) >> Reduce 206 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 221
Parser(B) >> Reduce 208 [expression ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression', go to state 268
Parser(B) >> Reduce 137 [return ::= TK_RETURN expression], pop back to state 9.
Parser(B) >> ... then shift 'return', go to state 292
Parser(B) >> Reduce 44 [keyword_instruction ::= return], pop back to state 9.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 9.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_EOS' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 9.
Parser(B) >> ... then shift 'labeled_instruction', go to state 208
Parser(B) >> Reduce 20 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_EOS', go to state 329
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_EOS]
Parser(B) >> Input '$' in state 329
Parser(B) >> Reduce 0 [program ::= rexx_options instruction_list TK_EOS], pop back to state 0.
Parser(B) >> ... then shift 'program', pending reduce -2
Parser(B) >> Accept!
