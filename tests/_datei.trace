Options parser >> Input 'TK_OPTIONS' in state 0
Options parser >> Shift 'TK_OPTIONS', go to state 1
Options parser >> Return. Stack=[TK_OPTIONS]
Options parser >> Input 'TK_LEVELB' in state 1
Options parser >> Shift 'TK_LEVELB', go to state 16
Options parser >> Return. Stack=[TK_OPTIONS TK_LEVELB]
Options parser >> Input 'TK_EOC' in state 16
Options parser >> Reduce 4 [option ::= TK_LEVELB], pop back to state 1.
Options parser >> ... then shift 'option', go to state 4
Options parser >> Reduce 18 [option_list ::= option] without external action, pop back to state 1.
Options parser >> ... then shift 'option_list', go to state 2
Options parser >> Shift 'TK_EOC', go to state 23
Options parser >> Return. Stack=[TK_OPTIONS option_list TK_EOC]
Options parser >> Input 'TK_SYMBOL' in state 23
Options parser >> WILDCARD TK_SYMBOL => ANYTHING
Options parser >> Reduce 2 [rexx_options ::= TK_OPTIONS option_list TK_EOC], pop back to state 0.
Options parser >> ... then shift 'rexx_options', go to state 3
Options parser >> WILDCARD TK_SYMBOL => ANYTHING
Options parser >> Shift 'TK_SYMBOL', go to state 20
Options parser >> Return. Stack=[rexx_options TK_SYMBOL]
Options parser >> Popping TK_SYMBOL
Options parser >> Popping rexx_options
Parser(B) >> Input 'TK_OPTIONS' in state 0
Parser(B) >> Shift 'TK_OPTIONS', go to state 81
Parser(B) >> Return. Stack=[TK_OPTIONS]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 81
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 297
Parser(B) >> Return. Stack=[TK_OPTIONS TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 297
Parser(B) >> Reduce 18 [option ::= TK_VAR_SYMBOL], pop back to state 81.
Parser(B) >> ... then shift 'option', go to state 296
Parser(B) >> Reduce 16 [option_list ::= option], pop back to state 81.
Parser(B) >> ... then shift 'option_list', go to state 89
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 129
Parser(B) >> Shift 'TK_EOC', go to state 194
Parser(B) >> Return. Stack=[TK_OPTIONS option_list junk TK_EOC]
Parser(B) >> Input 'TK_NAMESPACE' in state 194
Parser(B) >> Reduce 15 [rexx_options ::= TK_OPTIONS option_list junk TK_EOC], pop back to state 0.
Parser(B) >> ... then shift 'rexx_options', go to state 1
Parser(B) >> Shift 'TK_NAMESPACE', go to state 114
Parser(B) >> Return. Stack=[rexx_options TK_NAMESPACE]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 114
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 96
Parser(B) >> Return. Stack=[rexx_options TK_NAMESPACE TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 96
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 387
Parser(B) >> Shift 'TK_EOC', go to state 203
Parser(B) >> Return. Stack=[rexx_options TK_NAMESPACE TK_VAR_SYMBOL junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 203
Parser(B) >> Reduce 22 [namespace_instruction ::= TK_NAMESPACE TK_VAR_SYMBOL junk TK_EOC], pop back to state 1.
Parser(B) >> ... then shift 'namespace_instruction', go to state 196
Parser(B) >> Reduce 19 [namespace_list ::= namespace_instruction], pop back to state 1.
Parser(B) >> ... then shift 'namespace_list', go to state 2
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 2.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 2.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 2.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 2.
Parser(B) >> ... then shift 'labeled_instruction', go to state 183
Parser(B) >> Reduce 29 [instruction_list ::= labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 19
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 19.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 19.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 19.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 19.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 19.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 19.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 19.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 19.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 19.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 19.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 19.
Parser(B) >> ... then shift 'expression', go to state 308
Parser(B) >> Reduce 123 [argument ::= var_symbol TK_EQUAL expression], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 30.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Shift 'TK_EQUAL', go to state 48
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 48
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_THEN' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 48.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 48.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 48.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 48.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 48.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 48.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 48.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 208 [comparison ::= comparison TK_EQUAL concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 15.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 33
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 var_symbol TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 15.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_RETURN' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN]
Parser(B) >> Input 'TK_STRING' in state 23
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 15.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 15.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_RETURN' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN]
Parser(B) >> Input 'TK_STRING' in state 23
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 15.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 15.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_DO' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_DO', go to state 111
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO]
Parser(B) >> Input 'TK_EOC' in state 111
Parser(B) >> Shift 'TK_EOC', go to state 7
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 7
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 7.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_IDIV' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 33.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Shift 'TK_IDIV', go to state 68
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL multiplication TK_IDIV]
Parser(B) >> Input 'TK_INTEGER' in state 68
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL multiplication TK_IDIV TK_INTEGER]
Parser(B) >> Input 'TK_PLUS' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 68.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 68.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 68.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 68.
Parser(B) >> ... then shift 'power_expression', go to state 218
Parser(B) >> Reduce 187 [multiplication ::= multiplication TK_IDIV power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Shift 'TK_PLUS', go to state 64
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL addition TK_PLUS]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 64
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL addition TK_PLUS TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL addition TK_PLUS TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_INTEGER' in state 21
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL addition TK_PLUS TK_VAR_SYMBOL TK_OPEN_BRACKET TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL addition TK_PLUS TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL addition TK_PLUS TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL addition TK_PLUS TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL addition TK_PLUS TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL addition TK_PLUS TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 64.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 64.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 64.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 64.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 64.
Parser(B) >> ... then shift 'multiplication', go to state 240
Parser(B) >> Reduce 190 [addition ::= addition TK_PLUS multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 7.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 7.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 7.
Parser(B) >> ... then shift 'labeled_instruction', go to state 183
Parser(B) >> Reduce 29 [instruction_list ::= labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 23.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 10.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 10.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_END' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_END', go to state 128
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_END]
Parser(B) >> Input 'TK_EOC' in state 128
Parser(B) >> Reduce 69 [simple_do ::= TK_DO TK_EOC instruction_list TK_END], pop back to state 15.
Parser(B) >> ... then shift 'simple_do', go to state 101
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 403
Parser(B) >> Shift 'TK_EOC', go to state 186
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 simple_do junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 186
Parser(B) >> Reduce 66 [group ::= simple_do junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'group', go to state 181
Parser(B) >> Reduce 37 [instruction ::= group], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_OR' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Shift 'TK_OR', go to state 36
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 36
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_OR' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 36.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 36.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 36.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 36.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 36.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 36.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 36.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Reduce 221 [or_expression ::= or_expression TK_OR comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Shift 'TK_OR', go to state 36
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 36
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_OR' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 36.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 36.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 36.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 36.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 36.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 36.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 36.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Reduce 221 [or_expression ::= or_expression TK_OR comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Shift 'TK_OR', go to state 36
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 36
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_OR' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 36.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 36.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 36.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 36.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 36.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 36.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 36.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Reduce 221 [or_expression ::= or_expression TK_OR comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Shift 'TK_OR', go to state 36
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 36
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_OR' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 36.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 36.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 36.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 36.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 36.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 36.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 36.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Reduce 221 [or_expression ::= or_expression TK_OR comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Shift 'TK_OR', go to state 36
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 36
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 36.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 36.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 36.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 36.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 36.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 36.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 36.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Reduce 221 [or_expression ::= or_expression TK_OR comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_DO' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_DO', go to state 111
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO]
Parser(B) >> Input 'TK_EOC' in state 111
Parser(B) >> Shift 'TK_EOC', go to state 7
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 7
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 7.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 7.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 7.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 7.
Parser(B) >> ... then shift 'labeled_instruction', go to state 183
Parser(B) >> Reduce 29 [instruction_list ::= labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 10.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 10.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_END' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_END', go to state 128
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_END]
Parser(B) >> Input 'TK_EOC' in state 128
Parser(B) >> Reduce 69 [simple_do ::= TK_DO TK_EOC instruction_list TK_END], pop back to state 15.
Parser(B) >> ... then shift 'simple_do', go to state 101
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 403
Parser(B) >> Shift 'TK_EOC', go to state 186
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 simple_do junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 186
Parser(B) >> Reduce 66 [group ::= simple_do junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'group', go to state 181
Parser(B) >> Reduce 37 [instruction ::= group], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_OR' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Shift 'TK_OR', go to state 36
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 36
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 36.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 36.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 36.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 36.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 36.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 36.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 36.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Reduce 221 [or_expression ::= or_expression TK_OR comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_DO' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_DO', go to state 111
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO]
Parser(B) >> Input 'TK_EOC' in state 111
Parser(B) >> Shift 'TK_EOC', go to state 7
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 7
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 7.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 7.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 7.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 7.
Parser(B) >> ... then shift 'labeled_instruction', go to state 183
Parser(B) >> Reduce 29 [instruction_list ::= labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 10.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 10.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_END' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_END', go to state 128
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_END]
Parser(B) >> Input 'TK_EOC' in state 128
Parser(B) >> Reduce 69 [simple_do ::= TK_DO TK_EOC instruction_list TK_END], pop back to state 15.
Parser(B) >> ... then shift 'simple_do', go to state 101
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 403
Parser(B) >> Shift 'TK_EOC', go to state 186
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 simple_do junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 186
Parser(B) >> Reduce 66 [group ::= simple_do junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'group', go to state 181
Parser(B) >> Reduce 37 [instruction ::= group], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_DO' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_DO', go to state 111
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO]
Parser(B) >> Input 'TK_EOC' in state 111
Parser(B) >> Shift 'TK_EOC', go to state 7
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 7
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 7.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 7.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 7.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 7.
Parser(B) >> ... then shift 'labeled_instruction', go to state 183
Parser(B) >> Reduce 29 [instruction_list ::= labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 10.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 10.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_END' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_END', go to state 128
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_END]
Parser(B) >> Input 'TK_EOC' in state 128
Parser(B) >> Reduce 69 [simple_do ::= TK_DO TK_EOC instruction_list TK_END], pop back to state 15.
Parser(B) >> ... then shift 'simple_do', go to state 101
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 403
Parser(B) >> Shift 'TK_EOC', go to state 186
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 simple_do junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 186
Parser(B) >> Reduce 66 [group ::= simple_do junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'group', go to state 181
Parser(B) >> Reduce 37 [instruction ::= group], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_DO' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_DO', go to state 111
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO]
Parser(B) >> Input 'TK_EOC' in state 111
Parser(B) >> Shift 'TK_EOC', go to state 7
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 7
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 7.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 33
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 7.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 7.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 7.
Parser(B) >> ... then shift 'labeled_instruction', go to state 183
Parser(B) >> Reduce 29 [instruction_list ::= labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 10.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 10.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_END' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_END', go to state 128
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_END]
Parser(B) >> Input 'TK_EOC' in state 128
Parser(B) >> Reduce 69 [simple_do ::= TK_DO TK_EOC instruction_list TK_END], pop back to state 15.
Parser(B) >> ... then shift 'simple_do', go to state 101
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 403
Parser(B) >> Shift 'TK_EOC', go to state 186
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 simple_do junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 186
Parser(B) >> Reduce 66 [group ::= simple_do junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'group', go to state 181
Parser(B) >> Reduce 37 [instruction ::= group], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_DO' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_DO', go to state 111
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO]
Parser(B) >> Input 'TK_EOC' in state 111
Parser(B) >> Shift 'TK_EOC', go to state 7
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 7
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 7.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 33
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 7.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 7.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 7.
Parser(B) >> ... then shift 'labeled_instruction', go to state 183
Parser(B) >> Reduce 29 [instruction_list ::= labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 10.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 10.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_END' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_END', go to state 128
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_END]
Parser(B) >> Input 'TK_EOC' in state 128
Parser(B) >> Reduce 69 [simple_do ::= TK_DO TK_EOC instruction_list TK_END], pop back to state 15.
Parser(B) >> ... then shift 'simple_do', go to state 101
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 403
Parser(B) >> Shift 'TK_EOC', go to state 186
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 simple_do junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 186
Parser(B) >> Reduce 66 [group ::= simple_do junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'group', go to state 181
Parser(B) >> Reduce 37 [instruction ::= group], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_DO' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_DO', go to state 111
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO]
Parser(B) >> Input 'TK_EOC' in state 111
Parser(B) >> Shift 'TK_EOC', go to state 7
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 7
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 7.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_STRING' in state 24
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_STRING]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 7.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 7.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 7.
Parser(B) >> ... then shift 'labeled_instruction', go to state 183
Parser(B) >> Reduce 29 [instruction_list ::= labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 10.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 10.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_END' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_END', go to state 128
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_END]
Parser(B) >> Input 'TK_EOC' in state 128
Parser(B) >> Reduce 69 [simple_do ::= TK_DO TK_EOC instruction_list TK_END], pop back to state 15.
Parser(B) >> ... then shift 'simple_do', go to state 101
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 403
Parser(B) >> Shift 'TK_EOC', go to state 186
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 simple_do junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 186
Parser(B) >> Reduce 66 [group ::= simple_do junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'group', go to state 181
Parser(B) >> Reduce 37 [instruction ::= group], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_DO' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_DO', go to state 111
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO]
Parser(B) >> Input 'TK_EOC' in state 111
Parser(B) >> Shift 'TK_EOC', go to state 7
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 7
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 7.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_STRING' in state 24
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_STRING]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 7.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 7.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 7.
Parser(B) >> ... then shift 'labeled_instruction', go to state 183
Parser(B) >> Reduce 29 [instruction_list ::= labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 10.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 10.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_RETURN TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 10.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 10.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 10.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_END' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 10.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 7.
Parser(B) >> ... then shift 'instruction_list', go to state 10
Parser(B) >> Shift 'TK_END', go to state 128
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_DO TK_EOC instruction_list TK_END]
Parser(B) >> Input 'TK_EOC' in state 128
Parser(B) >> Reduce 69 [simple_do ::= TK_DO TK_EOC instruction_list TK_END], pop back to state 15.
Parser(B) >> ... then shift 'simple_do', go to state 101
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 403
Parser(B) >> Shift 'TK_EOC', go to state 186
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 simple_do junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 186
Parser(B) >> Reduce 66 [group ::= simple_do junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'group', go to state 181
Parser(B) >> Reduce 37 [instruction ::= group], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_RETURN' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 23.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 15.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 15.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_RETURN' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_PLUS' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 23.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Shift 'TK_PLUS', go to state 64
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN addition TK_PLUS]
Parser(B) >> Input 'TK_INTEGER' in state 64
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN addition TK_PLUS TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 64.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 64.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 64.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 64.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 64.
Parser(B) >> ... then shift 'multiplication', go to state 240
Parser(B) >> Reduce 190 [addition ::= addition TK_PLUS multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 15.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 15.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_STRING' in state 21
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_STRING]
Parser(B) >> Input 'TK_COMMA' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_GT' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Shift 'TK_GT', go to state 46
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_GT]
Parser(B) >> Input 'TK_INTEGER' in state 46
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_GT TK_INTEGER]
Parser(B) >> Input 'TK_THEN' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 46.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 46.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 46.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 46.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 46.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 46.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 46.
Parser(B) >> ... then shift 'concatenation', go to state 58
Parser(B) >> Reduce 210 [comparison ::= comparison TK_GT concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_RETURN' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_PLUS' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 23.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Shift 'TK_PLUS', go to state 64
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN addition TK_PLUS]
Parser(B) >> Input 'TK_INTEGER' in state 64
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN addition TK_PLUS TK_INTEGER]
Parser(B) >> Input 'TK_PLUS' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 64.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 64.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 64.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 64.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 64.
Parser(B) >> ... then shift 'multiplication', go to state 240
Parser(B) >> Reduce 190 [addition ::= addition TK_PLUS multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Shift 'TK_PLUS', go to state 64
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN addition TK_PLUS]
Parser(B) >> Input 'TK_INTEGER' in state 64
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN addition TK_PLUS TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 64.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 64.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 64.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 64.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 64.
Parser(B) >> ... then shift 'multiplication', go to state 240
Parser(B) >> Reduce 190 [addition ::= addition TK_PLUS multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 15.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 15.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_STRING' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 23.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_RETURN concatenation TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 61.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 61.
Parser(B) >> ... then shift 'bracket', go to state 216
Parser(B) >> Reduce 192 [prefix_expression_c ::= bracket], pop back to state 61.
Parser(B) >> ... then shift 'prefix_expression_c', go to state 214
Parser(B) >> Reduce 194 [power_expression_c ::= prefix_expression_c], pop back to state 61.
Parser(B) >> ... then shift 'power_expression_c', go to state 213
Parser(B) >> Reduce 196 [multiplication_c ::= power_expression_c], pop back to state 61.
Parser(B) >> ... then shift 'multiplication_c', go to state 238
Parser(B) >> Reduce 201 [addition_c ::= multiplication_c], pop back to state 61.
Parser(B) >> ... then shift 'addition_c', go to state 244
Parser(B) >> Reduce 206 [concatenation ::= concatenation addition_c], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 11.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_INTEGER' in state 19
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 19.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 19.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 19.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 19.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 19.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 19.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 19.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 19.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 19.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 19.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 19.
Parser(B) >> ... then shift 'expression', go to state 308
Parser(B) >> Reduce 123 [argument ::= var_symbol TK_EQUAL expression], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EQUAL' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Shift 'TK_EQUAL', go to state 48
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 48
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_COMMA' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_THEN' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 48.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 48.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 48.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 48.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 48.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 48.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 48.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 208 [comparison ::= comparison TK_EQUAL concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_RETURN' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN]
Parser(B) >> Input 'TK_INTEGER' in state 23
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 15.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 15.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_RETURN]
Parser(B) >> Input 'TK_INTEGER' in state 23
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_RETURN TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 11.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_IDIV' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 30.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Shift 'TK_IDIV', go to state 68
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF multiplication TK_IDIV]
Parser(B) >> Input 'TK_INTEGER' in state 68
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF multiplication TK_IDIV TK_INTEGER]
Parser(B) >> Input 'TK_EQUAL' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 68.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 68.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 68.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 68.
Parser(B) >> ... then shift 'power_expression', go to state 218
Parser(B) >> Reduce 187 [multiplication ::= multiplication TK_IDIV power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Shift 'TK_EQUAL', go to state 48
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL]
Parser(B) >> Input 'TK_INTEGER' in state 48
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_INTEGER]
Parser(B) >> Input 'TK_THEN' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 48.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 48.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 48.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 48.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 48.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 48.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 48.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 208 [comparison ::= comparison TK_EQUAL concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_RETURN' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN]
Parser(B) >> Input 'TK_INTEGER' in state 23
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN TK_INTEGER]
Parser(B) >> Input 'TK_PLUS' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Shift 'TK_PLUS', go to state 64
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN addition TK_PLUS]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 64
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_RETURN addition TK_PLUS TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 64.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 64.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 64.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 64.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 64.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 64.
Parser(B) >> ... then shift 'multiplication', go to state 240
Parser(B) >> Reduce 190 [addition ::= addition TK_PLUS multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 15.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 15.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 23.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 11.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 19
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 19.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 19.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 19.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 19.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 19.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 19.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 19.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 19.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 19.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 19.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 19.
Parser(B) >> ... then shift 'expression', go to state 308
Parser(B) >> Reduce 123 [argument ::= var_symbol TK_EQUAL expression], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 11.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_INTEGER' in state 33
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list var_symbol TK_EQUAL TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 11.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 11.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 33
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list var_symbol TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 11.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 11.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 33
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list var_symbol TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 11.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 30.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Shift 'TK_EQUAL', go to state 48
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 48
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_THEN' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 48.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 48.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 48.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 48.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 48.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 48.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 48.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 208 [comparison ::= comparison TK_EQUAL concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 15.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 33
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 var_symbol TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 15.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ASSEMBLER' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ASSEMBLER', go to state 92
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ASSEMBLER]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 92
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 289
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ASSEMBLER TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 289
Parser(B) >> Reduce 144 [assembler_op ::= TK_VAR_SYMBOL], pop back to state 92.
Parser(B) >> ... then shift 'assembler_op', go to state 86
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ASSEMBLER assembler_op TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 86.
Parser(B) >> ... then shift 'var_symbol', go to state 304
Parser(B) >> Reduce 146 [assembler_arg ::= var_symbol], pop back to state 86.
Parser(B) >> ... then shift 'assembler_arg', go to state 306
Parser(B) >> Shift 'TK_COMMA', go to state 91
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ASSEMBLER assembler_op assembler_arg TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 91
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ASSEMBLER assembler_op assembler_arg TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 91.
Parser(B) >> ... then shift 'var_symbol', go to state 304
Parser(B) >> Reduce 146 [assembler_arg ::= var_symbol], pop back to state 91.
Parser(B) >> ... then shift 'assembler_arg', go to state 305
Parser(B) >> Reduce 142 [assembler_instruction ::= assembler_op assembler_arg TK_COMMA assembler_arg], pop back to state 92.
Parser(B) >> ... then shift 'assembler_instruction', go to state 347
Parser(B) >> Reduce 124 [assembler ::= TK_ASSEMBLER assembler_instruction], pop back to state 11.
Parser(B) >> ... then shift 'assembler', go to state 369
Parser(B) >> Reduce 48 [keyword_instruction ::= assembler], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_DO' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_DO', go to state 111
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_DO]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 111
Parser(B) >> Reduce 76 [tk_doloop ::= TK_DO], pop back to state 11.
Parser(B) >> ... then shift 'tk_doloop', go to state 17
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 17.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_INTEGER' in state 33
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop var_symbol TK_EQUAL TK_INTEGER]
Parser(B) >> Input 'TK_TO' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 17.
Parser(B) >> ... then shift 'assignment', go to state 85
Parser(B) >> Shift 'TK_TO', go to state 27
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop assignment TK_TO]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 27
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop assignment TK_TO TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 27.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 27.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 27.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 27.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 27.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 27.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 27.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 27.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 27.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 27.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 27.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 27.
Parser(B) >> ... then shift 'expression', go to state 286
Parser(B) >> Reduce 97 [dorep_item ::= TK_TO expression], pop back to state 85.
Parser(B) >> ... then shift 'dorep_item', go to state 283
Parser(B) >> Reduce 95 [dorep_list ::= dorep_item], pop back to state 85.
Parser(B) >> ... then shift 'dorep_list', go to state 112
Parser(B) >> Reduce 94 [dorep ::= assignment dorep_list], pop back to state 17.
Parser(B) >> ... then shift 'dorep', go to state 93
Parser(B) >> Shift 'TK_EOC', go to state 3
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 3
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 3.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 24
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 24.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_COMMA', go to state 24
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA]
Parser(B) >> Input 'TK_INTEGER' in state 24
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_COMMA TK_INTEGER]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 24.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 24.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 24.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 24.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 24.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 24.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 24.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 24.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 24.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 24.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 24.
Parser(B) >> ... then shift 'expression_in_list', go to state 294
Parser(B) >> Reduce 166 [expression_list ::= expression_list TK_COMMA expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_EOC' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 3.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 3.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 3.
Parser(B) >> ... then shift 'labeled_instruction', go to state 183
Parser(B) >> Reduce 29 [instruction_list ::= labeled_instruction], pop back to state 3.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 30.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Shift 'TK_EQUAL', go to state 48
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF comparison TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 48
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF comparison TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_OR' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 48.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 48.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 48.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 48.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 48.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 48.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 48.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 208 [comparison ::= comparison TK_EQUAL concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Shift 'TK_OR', go to state 36
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 36
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 36.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 36.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 36.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 36.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 36.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 36.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 36.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 36.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Shift 'TK_EQUAL', go to state 48
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR comparison TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 48
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR comparison TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_OR' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 48.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 48.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 48.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 48.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 48.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 48.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 48.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 208 [comparison ::= comparison TK_EQUAL concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Reduce 221 [or_expression ::= or_expression TK_OR comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Shift 'TK_OR', go to state 36
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 36
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 36.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 36.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 36.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 36.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 36.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 36.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 36.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 36.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Shift 'TK_EQUAL', go to state 48
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR comparison TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 48
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR comparison TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_OR' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 48.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 48.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 48.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 48.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 48.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 48.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 48.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 208 [comparison ::= comparison TK_EQUAL concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Reduce 221 [or_expression ::= or_expression TK_OR comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Shift 'TK_OR', go to state 36
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 36
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 36.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 36.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 36.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 36.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 36.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 36.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 36.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 36.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Shift 'TK_EQUAL', go to state 48
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR comparison TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 48
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR comparison TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_OR' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 48.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 48.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 48.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 48.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 48.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 48.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 48.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 208 [comparison ::= comparison TK_EQUAL concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Reduce 221 [or_expression ::= or_expression TK_OR comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Shift 'TK_OR', go to state 36
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 36
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 36.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 36.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 36.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 36.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 36.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 36.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 36.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 36.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Shift 'TK_EQUAL', go to state 48
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR comparison TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 48
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF or_expression TK_OR comparison TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_THEN' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 48.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 48.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 48.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 48.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 48.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 48.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 48.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 48.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 208 [comparison ::= comparison TK_EQUAL concatenation], pop back to state 36.
Parser(B) >> ... then shift 'comparison', go to state 252
Parser(B) >> Reduce 221 [or_expression ::= or_expression TK_OR comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 15.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 TK_THEN ncl0 var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 TK_THEN ncl0 var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CONCAT' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 33.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Shift 'TK_CONCAT', go to state 62
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 TK_THEN ncl0 var_symbol TK_EQUAL concatenation TK_CONCAT]
Parser(B) >> Input 'TK_STRING' in state 62
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 TK_THEN ncl0 var_symbol TK_EQUAL concatenation TK_CONCAT TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 62.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 62.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 62.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 62.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 62.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 62.
Parser(B) >> ... then shift 'addition', go to state 243
Parser(B) >> Reduce 205 [concatenation ::= concatenation TK_CONCAT addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 15.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ELSE' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Shift 'TK_ELSE', go to state 108
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 then TK_ELSE]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 108
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 16
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 then TK_ELSE ncl0 TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 16.
Parser(B) >> ... then shift 'var_symbol', go to state 251
Parser(B) >> Shift 'TK_EQUAL', go to state 33
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 then TK_ELSE ncl0 var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 33
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 then TK_ELSE ncl0 var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CONCAT' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 33.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 33.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 33.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 33.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 33.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 33.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 33.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Shift 'TK_CONCAT', go to state 62
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 then TK_ELSE ncl0 var_symbol TK_EQUAL concatenation TK_CONCAT]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 62
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 then TK_ELSE ncl0 var_symbol TK_EQUAL concatenation TK_CONCAT TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 62.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 62.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 62.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 62.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 62.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 62.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 62.
Parser(B) >> ... then shift 'addition', go to state 243
Parser(B) >> Reduce 205 [concatenation ::= concatenation TK_CONCAT addition], pop back to state 33.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 33.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 33.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 33.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 33.
Parser(B) >> ... then shift 'expression', go to state 282
Parser(B) >> Reduce 44 [assignment ::= var_symbol TK_EQUAL expression], pop back to state 16.
Parser(B) >> ... then shift 'assignment', go to state 373
Parser(B) >> Reduce 41 [single_instruction ::= assignment], pop back to state 16.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_IF expression ncl0 then TK_ELSE ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_END' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 16.
Parser(B) >> ... then shift 'instruction', go to state 177
Parser(B) >> Reduce 109 [else ::= TK_ELSE ncl0 instruction], pop back to state 106.
Parser(B) >> ... then shift 'else', go to state 182
Parser(B) >> Reduce 103 [if ::= TK_IF expression ncl0 then else], pop back to state 9.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 9.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 9.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 3.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_END', go to state 127
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list tk_doloop dorep TK_EOC instruction_list TK_END]
Parser(B) >> Input 'TK_EOC' in state 127
Parser(B) >> Reduce 78 [do ::= tk_doloop dorep TK_EOC instruction_list TK_END], pop back to state 11.
Parser(B) >> ... then shift 'do', go to state 100
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 402
Parser(B) >> Shift 'TK_EOC', go to state 185
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list do junk TK_EOC]
Parser(B) >> Input 'TK_IF' in state 185
Parser(B) >> Reduce 67 [group ::= do junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_IF', go to state 30
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 30
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_LT' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 30.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 30.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 30.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 30.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 30.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 30.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 30.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Shift 'TK_LT', go to state 45
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_LT]
Parser(B) >> Input 'TK_INTEGER' in state 45
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF comparison TK_LT TK_INTEGER]
Parser(B) >> Input 'TK_THEN' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 45.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 45.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 45.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 45.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 45.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 45.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 45.
Parser(B) >> ... then shift 'concatenation', go to state 57
Parser(B) >> Reduce 211 [comparison ::= comparison TK_LT concatenation], pop back to state 30.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 30.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 30.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 30.
Parser(B) >> ... then shift 'expression', go to state 126
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 130
Parser(B) >> Shift 'TK_THEN', go to state 107
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN]
Parser(B) >> Input 'TK_SAY' in state 107
Parser(B) >> Reduce 250 [ncl0 ::=] without external action.
Parser(B) >> ... then shift 'ncl0', go to state 15
Parser(B) >> Shift 'TK_SAY', go to state 22
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_SAY]
Parser(B) >> Input 'TK_STRING' in state 22
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_SAY TK_STRING]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 22.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 22.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 22.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 22.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 22.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 22.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 22.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 TK_SAY concatenation TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 61.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 61.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 61.
Parser(B) >> ... then shift 'bracket', go to state 216
Parser(B) >> Reduce 192 [prefix_expression_c ::= bracket], pop back to state 61.
Parser(B) >> ... then shift 'prefix_expression_c', go to state 214
Parser(B) >> Reduce 194 [power_expression_c ::= prefix_expression_c], pop back to state 61.
Parser(B) >> ... then shift 'power_expression_c', go to state 213
Parser(B) >> Reduce 196 [multiplication_c ::= power_expression_c], pop back to state 61.
Parser(B) >> ... then shift 'multiplication_c', go to state 238
Parser(B) >> Reduce 201 [addition_c ::= multiplication_c], pop back to state 61.
Parser(B) >> ... then shift 'addition_c', go to state 244
Parser(B) >> Reduce 206 [concatenation ::= concatenation addition_c], pop back to state 22.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 22.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 22.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 22.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 22.
Parser(B) >> ... then shift 'expression', go to state 327
Parser(B) >> Reduce 156 [say ::= TK_SAY expression], pop back to state 15.
Parser(B) >> ... then shift 'say', go to state 361
Parser(B) >> Reduce 56 [keyword_instruction ::= say], pop back to state 15.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 15.
Parser(B) >> ... then shift 'single_instruction', go to state 99
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 401
Parser(B) >> Shift 'TK_EOC', go to state 180
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_IF expression ncl0 TK_THEN ncl0 single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 180
Parser(B) >> Reduce 38 [instruction ::= single_instruction junk TK_EOC], pop back to state 15.
Parser(B) >> ... then shift 'instruction', go to state 174
Parser(B) >> Reduce 106 [then ::= TK_THEN ncl0 instruction], pop back to state 130.
Parser(B) >> ... then shift 'then', go to state 106
Parser(B) >> Reduce 104 [if ::= TK_IF expression ncl0 then], pop back to state 11.
Parser(B) >> ... then shift 'if', go to state 184
Parser(B) >> Reduce 68 [group ::= if], pop back to state 11.
Parser(B) >> ... then shift 'group', go to state 192
Parser(B) >> Reduce 31 [labeled_instruction ::= group], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_RETURN', go to state 23
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_RETURN]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 23
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_RETURN TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 23.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 23.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 23.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 23.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 23.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 23.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 23.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 23.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 23.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 23.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 23.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 23.
Parser(B) >> ... then shift 'expression', go to state 328
Parser(B) >> Reduce 154 [return ::= TK_RETURN expression], pop back to state 11.
Parser(B) >> ... then shift 'return', go to state 362
Parser(B) >> Reduce 55 [keyword_instruction ::= return], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_INTEGER' in state 19
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 19.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 19.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 19.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 19.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 19.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 19.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 19.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 19.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 19.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 19.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 19.
Parser(B) >> ... then shift 'expression', go to state 308
Parser(B) >> Reduce 123 [argument ::= var_symbol TK_EQUAL expression], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 19
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 19.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 19.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 19.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 19.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 19.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 19.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 19.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 19.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 19.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 19.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 19.
Parser(B) >> ... then shift 'expression', go to state 308
Parser(B) >> Reduce 123 [argument ::= var_symbol TK_EQUAL expression], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_INTEGER' in state 19
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 19.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 19.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 19.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 19.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 19.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 19.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 19.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 19.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 19.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 19.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 19.
Parser(B) >> ... then shift 'expression', go to state 308
Parser(B) >> Reduce 123 [argument ::= var_symbol TK_EQUAL expression], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_LABEL' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_LABEL', go to state 172
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL]
Parser(B) >> Input 'TK_PROCEDURE' in state 172
Parser(B) >> Shift 'TK_PROCEDURE', go to state 315
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE]
Parser(B) >> Input 'TK_EQUAL' in state 315
Parser(B) >> Shift 'TK_EQUAL', go to state 131
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 131
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_LABEL TK_PROCEDURE TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_EOC' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 131.
Parser(B) >> ... then shift 'class', go to state 375
Parser(B) >> Reduce 112 [procedure ::= TK_LABEL TK_PROCEDURE TK_EQUAL class], pop back to state 11.
Parser(B) >> ... then shift 'procedure', go to state 363
Parser(B) >> Reduce 54 [keyword_instruction ::= procedure], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_ARG' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_ARG', go to state 82
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 82
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 82.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 82.
Parser(B) >> ... then shift 'argument', go to state 307
Parser(B) >> Reduce 118 [arg_list ::= argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_CLASS' in state 19
Parser(B) >> Shift 'TK_CLASS', go to state 314
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_CLASS]
Parser(B) >> Input 'TK_COMMA' in state 314
Parser(B) >> Reduce 116 [class ::= TK_CLASS], pop back to state 19.
Parser(B) >> ... then shift 'class', go to state 309
Parser(B) >> Reduce 121 [argument ::= var_symbol TK_EQUAL class], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 19
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_OPEN_BRACKET' in state 110
Parser(B) >> Shift 'TK_OPEN_BRACKET', go to state 21
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 21
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_CLOSE_BRACKET' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 21.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 290
Parser(B) >> Reduce 248 [expression_in_list ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression_in_list', go to state 295
Parser(B) >> Reduce 165 [expression_list ::= expression_in_list], pop back to state 21.
Parser(B) >> ... then shift 'expression_list', go to state 379
Parser(B) >> Shift 'TK_CLOSE_BRACKET', go to state 207
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_VAR_SYMBOL TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET]
Parser(B) >> Input 'TK_PLUS' in state 207
Parser(B) >> Reduce 171 [function_parameters ::= TK_OPEN_BRACKET expression_list TK_CLOSE_BRACKET], pop back to state 110.
Parser(B) >> ... then shift 'function_parameters', go to state 235
Parser(B) >> Reduce 168 [term ::= TK_VAR_SYMBOL function_parameters], pop back to state 19.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 19.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 19.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 19.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 19.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 19.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Shift 'TK_PLUS', go to state 64
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL addition TK_PLUS]
Parser(B) >> Input 'TK_INTEGER' in state 64
Parser(B) >> Shift 'TK_INTEGER', go to state 230
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL addition TK_PLUS TK_INTEGER]
Parser(B) >> Input 'TK_MINUS' in state 230
Parser(B) >> Reduce 174 [term ::= TK_INTEGER], pop back to state 64.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 64.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 64.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 64.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 64.
Parser(B) >> ... then shift 'multiplication', go to state 240
Parser(B) >> Reduce 190 [addition ::= addition TK_PLUS multiplication], pop back to state 19.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Shift 'TK_MINUS', go to state 63
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL addition TK_MINUS]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 63
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 110
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL addition TK_MINUS TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_COMMA' in state 110
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 63.
Parser(B) >> ... then shift 'var_symbol', go to state 232
Parser(B) >> Reduce 172 [term ::= var_symbol], pop back to state 63.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 63.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 63.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 63.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 63.
Parser(B) >> ... then shift 'multiplication', go to state 239
Parser(B) >> Reduce 191 [addition ::= addition TK_MINUS multiplication], pop back to state 19.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 19.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 19.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 19.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 19.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 19.
Parser(B) >> ... then shift 'expression', go to state 308
Parser(B) >> Reduce 123 [argument ::= var_symbol TK_EQUAL expression], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Shift 'TK_COMMA', go to state 103
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 103
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 293
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EQUAL' in state 293
Parser(B) >> Reduce 12 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 103.
Parser(B) >> ... then shift 'var_symbol', go to state 398
Parser(B) >> Shift 'TK_EQUAL', go to state 19
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL]
Parser(B) >> Input 'TK_STRING' in state 19
Parser(B) >> Shift 'TK_STRING', go to state 109
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_ARG arg_list TK_COMMA var_symbol TK_EQUAL TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 109
Parser(B) >> Reduce 175 [term ::= TK_STRING], pop back to state 19.
Parser(B) >> ... then shift 'term', go to state 229
Parser(B) >> Reduce 176 [bracket ::= term], pop back to state 19.
Parser(B) >> ... then shift 'bracket', go to state 227
Parser(B) >> Reduce 178 [prefix_expression ::= bracket], pop back to state 19.
Parser(B) >> ... then shift 'prefix_expression', go to state 223
Parser(B) >> Reduce 182 [power_expression ::= prefix_expression], pop back to state 19.
Parser(B) >> ... then shift 'power_expression', go to state 222
Parser(B) >> Reduce 184 [multiplication ::= power_expression], pop back to state 19.
Parser(B) >> ... then shift 'multiplication', go to state 241
Parser(B) >> Reduce 189 [addition ::= multiplication], pop back to state 19.
Parser(B) >> ... then shift 'addition', go to state 245
Parser(B) >> Reduce 204 [concatenation ::= addition], pop back to state 19.
Parser(B) >> ... then shift 'concatenation', go to state 61
Parser(B) >> Reduce 207 [comparison ::= concatenation], pop back to state 19.
Parser(B) >> ... then shift 'comparison', go to state 253
Parser(B) >> Reduce 220 [or_expression ::= comparison], pop back to state 19.
Parser(B) >> ... then shift 'or_expression', go to state 255
Parser(B) >> Reduce 222 [and_expression ::= or_expression], pop back to state 19.
Parser(B) >> ... then shift 'and_expression', go to state 277
Parser(B) >> Reduce 245 [expression ::= and_expression], pop back to state 19.
Parser(B) >> ... then shift 'expression', go to state 308
Parser(B) >> Reduce 123 [argument ::= var_symbol TK_EQUAL expression], pop back to state 103.
Parser(B) >> ... then shift 'argument', go to state 312
Parser(B) >> Reduce 119 [arg_list ::= arg_list TK_COMMA argument], pop back to state 82.
Parser(B) >> ... then shift 'arg_list', go to state 313
Parser(B) >> Reduce 115 [arg ::= TK_ARG arg_list], pop back to state 11.
Parser(B) >> ... then shift 'arg', go to state 368
Parser(B) >> Reduce 49 [keyword_instruction ::= arg], pop back to state 11.
Parser(B) >> ... then shift 'keyword_instruction', go to state 371
Parser(B) >> Reduce 43 [single_instruction ::= keyword_instruction], pop back to state 11.
Parser(B) >> ... then shift 'single_instruction', go to state 102
Parser(B) >> Reduce 8 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 404
Parser(B) >> Shift 'TK_EOC', go to state 191
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_EOS' in state 191
Parser(B) >> Reduce 32 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 11.
Parser(B) >> ... then shift 'labeled_instruction', go to state 193
Parser(B) >> Reduce 30 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 11
Parser(B) >> Shift 'TK_EOS', go to state 406
Parser(B) >> Return. Stack=[rexx_options namespace_list instruction_list TK_EOS]
Parser(B) >> Input '$' in state 406
Parser(B) >> Reduce 0 [program ::= rexx_options namespace_list instruction_list TK_EOS], pop back to state 0.
Parser(B) >> ... then shift 'program', pending reduce -2
Parser(B) >> Accept!
