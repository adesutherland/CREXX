Options parser >> Input 'TK_OPTIONS' in state 0
Options parser >> Shift 'TK_OPTIONS', go to state 1
Options parser >> Return. Stack=[TK_OPTIONS]
Options parser >> Input 'TK_LEVELB' in state 1
Options parser >> Shift 'TK_LEVELB', go to state 10
Options parser >> Return. Stack=[TK_OPTIONS TK_LEVELB]
Options parser >> Input 'TK_EOC' in state 10
Options parser >> Reduce 4 [option ::= TK_LEVELB], pop back to state 1.
Options parser >> ... then shift 'option', go to state 4
Options parser >> Reduce 12 [option_list ::= option] without external action, pop back to state 1.
Options parser >> ... then shift 'option_list', go to state 2
Options parser >> Shift 'TK_EOC', go to state 17
Options parser >> Return. Stack=[TK_OPTIONS option_list TK_EOC]
Options parser >> Popping TK_EOC
Options parser >> Popping option_list
Options parser >> Popping TK_OPTIONS
Parser(B) >> Input 'TK_OPTIONS' in state 0
Parser(B) >> Shift 'TK_OPTIONS', go to state 81
Parser(B) >> Return. Stack=[TK_OPTIONS]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 81
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 244
Parser(B) >> Return. Stack=[TK_OPTIONS TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 244
Parser(B) >> Reduce 17 [option ::= TK_VAR_SYMBOL], pop back to state 81.
Parser(B) >> ... then shift 'option', go to state 242
Parser(B) >> Reduce 14 [option_list ::= option], pop back to state 81.
Parser(B) >> ... then shift 'option_list', go to state 91
Parser(B) >> Shift 'TK_EOC', go to state 209
Parser(B) >> Return. Stack=[TK_OPTIONS option_list TK_EOC]
Parser(B) >> Input 'TK_SAY' in state 209
Parser(B) >> Reduce 13 [rexx_options ::= TK_OPTIONS option_list TK_EOC], pop back to state 0.
Parser(B) >> ... then shift 'rexx_options', go to state 2
Parser(B) >> Shift 'TK_SAY', go to state 20
Parser(B) >> Return. Stack=[rexx_options TK_SAY]
Parser(B) >> Input 'TK_STRING' in state 20
Parser(B) >> Shift 'TK_STRING', go to state 96
Parser(B) >> Return. Stack=[rexx_options TK_SAY TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 96
Parser(B) >> Reduce 159 [term ::= TK_STRING], pop back to state 20.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 20.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 20.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 20.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 20.
Parser(B) >> ... then shift 'multiplication', go to state 164
Parser(B) >> Reduce 173 [addition ::= multiplication], pop back to state 20.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Reduce 188 [concatenation ::= addition], pop back to state 20.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 191 [comparison ::= concatenation], pop back to state 20.
Parser(B) >> ... then shift 'comparison', go to state 213
Parser(B) >> Reduce 204 [or_expression ::= comparison], pop back to state 20.
Parser(B) >> ... then shift 'or_expression', go to state 220
Parser(B) >> Reduce 206 [and_expression ::= or_expression], pop back to state 20.
Parser(B) >> ... then shift 'and_expression', go to state 221
Parser(B) >> Reduce 208 [expression ::= and_expression], pop back to state 20.
Parser(B) >> ... then shift 'expression', go to state 267
Parser(B) >> Reduce 139 [say ::= TK_SAY expression], pop back to state 2.
Parser(B) >> ... then shift 'say', go to state 291
Parser(B) >> Reduce 45 [keyword_instruction ::= say], pop back to state 2.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 2.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_SAY' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 2.
Parser(B) >> ... then shift 'labeled_instruction', go to state 196
Parser(B) >> Reduce 19 [instruction_list ::= labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_SAY', go to state 20
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY]
Parser(B) >> Input 'TK_STRING' in state 20
Parser(B) >> Shift 'TK_STRING', go to state 96
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 96
Parser(B) >> Reduce 159 [term ::= TK_STRING], pop back to state 20.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 20.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 20.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 20.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 20.
Parser(B) >> ... then shift 'multiplication', go to state 164
Parser(B) >> Reduce 173 [addition ::= multiplication], pop back to state 20.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Reduce 188 [concatenation ::= addition], pop back to state 20.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 191 [comparison ::= concatenation], pop back to state 20.
Parser(B) >> ... then shift 'comparison', go to state 213
Parser(B) >> Reduce 204 [or_expression ::= comparison], pop back to state 20.
Parser(B) >> ... then shift 'or_expression', go to state 220
Parser(B) >> Reduce 206 [and_expression ::= or_expression], pop back to state 20.
Parser(B) >> ... then shift 'and_expression', go to state 221
Parser(B) >> Reduce 208 [expression ::= and_expression], pop back to state 20.
Parser(B) >> ... then shift 'expression', go to state 267
Parser(B) >> Reduce 139 [say ::= TK_SAY expression], pop back to state 9.
Parser(B) >> ... then shift 'say', go to state 291
Parser(B) >> Reduce 45 [keyword_instruction ::= say], pop back to state 9.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 9.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_SAY' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 9.
Parser(B) >> ... then shift 'labeled_instruction', go to state 208
Parser(B) >> Reduce 20 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_SAY', go to state 20
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY]
Parser(B) >> Input 'TK_STRING' in state 20
Parser(B) >> Shift 'TK_STRING', go to state 96
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY TK_STRING]
Parser(B) >> Input 'TK_EOC' in state 96
Parser(B) >> Reduce 159 [term ::= TK_STRING], pop back to state 20.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 20.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 20.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 20.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 20.
Parser(B) >> ... then shift 'multiplication', go to state 164
Parser(B) >> Reduce 173 [addition ::= multiplication], pop back to state 20.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Reduce 188 [concatenation ::= addition], pop back to state 20.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 191 [comparison ::= concatenation], pop back to state 20.
Parser(B) >> ... then shift 'comparison', go to state 213
Parser(B) >> Reduce 204 [or_expression ::= comparison], pop back to state 20.
Parser(B) >> ... then shift 'or_expression', go to state 220
Parser(B) >> Reduce 206 [and_expression ::= or_expression], pop back to state 20.
Parser(B) >> ... then shift 'and_expression', go to state 221
Parser(B) >> Reduce 208 [expression ::= and_expression], pop back to state 20.
Parser(B) >> ... then shift 'expression', go to state 267
Parser(B) >> Reduce 139 [say ::= TK_SAY expression], pop back to state 9.
Parser(B) >> ... then shift 'say', go to state 291
Parser(B) >> Reduce 45 [keyword_instruction ::= say], pop back to state 9.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 9.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_SAY' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 9.
Parser(B) >> ... then shift 'labeled_instruction', go to state 208
Parser(B) >> Reduce 20 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_SAY', go to state 20
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 20
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 97
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_VAR_SYMBOL' in state 97
Parser(B) >> Reduce 9 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 20.
Parser(B) >> ... then shift 'var_symbol', go to state 155
Parser(B) >> Reduce 155 [term ::= var_symbol], pop back to state 20.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 20.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 20.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 20.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 20.
Parser(B) >> ... then shift 'multiplication', go to state 164
Parser(B) >> Reduce 173 [addition ::= multiplication], pop back to state 20.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Reduce 188 [concatenation ::= addition], pop back to state 20.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Shift 'TK_VAR_SYMBOL', go to state 97
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY concatenation TK_VAR_SYMBOL]
Parser(B) >> Input 'TK_EOC' in state 97
Parser(B) >> Reduce 9 [var_symbol ::= TK_VAR_SYMBOL], pop back to state 60.
Parser(B) >> ... then shift 'var_symbol', go to state 155
Parser(B) >> Reduce 155 [term ::= var_symbol], pop back to state 60.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 60.
Parser(B) >> ... then shift 'bracket', go to state 138
Parser(B) >> Reduce 176 [prefix_expression_c ::= bracket], pop back to state 60.
Parser(B) >> ... then shift 'prefix_expression_c', go to state 136
Parser(B) >> Reduce 178 [power_expression_c ::= prefix_expression_c], pop back to state 60.
Parser(B) >> ... then shift 'power_expression_c', go to state 135
Parser(B) >> Reduce 180 [multiplication_c ::= power_expression_c], pop back to state 60.
Parser(B) >> ... then shift 'multiplication_c', go to state 161
Parser(B) >> Reduce 185 [addition_c ::= multiplication_c], pop back to state 60.
Parser(B) >> ... then shift 'addition_c', go to state 167
Parser(B) >> Reduce 190 [concatenation ::= concatenation addition_c], pop back to state 20.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 191 [comparison ::= concatenation], pop back to state 20.
Parser(B) >> ... then shift 'comparison', go to state 213
Parser(B) >> Reduce 204 [or_expression ::= comparison], pop back to state 20.
Parser(B) >> ... then shift 'or_expression', go to state 220
Parser(B) >> Reduce 206 [and_expression ::= or_expression], pop back to state 20.
Parser(B) >> ... then shift 'and_expression', go to state 221
Parser(B) >> Reduce 208 [expression ::= and_expression], pop back to state 20.
Parser(B) >> ... then shift 'expression', go to state 267
Parser(B) >> Reduce 139 [say ::= TK_SAY expression], pop back to state 9.
Parser(B) >> ... then shift 'say', go to state 291
Parser(B) >> Reduce 45 [keyword_instruction ::= say], pop back to state 9.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 9.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_SAY' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 9.
Parser(B) >> ... then shift 'labeled_instruction', go to state 208
Parser(B) >> Reduce 20 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_SAY', go to state 20
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY]
Parser(B) >> Input 'TK_INTEGER' in state 20
Parser(B) >> Shift 'TK_INTEGER', go to state 152
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY TK_INTEGER]
Parser(B) >> Input 'TK_PLUS' in state 152
Parser(B) >> Reduce 158 [term ::= TK_INTEGER], pop back to state 20.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 20.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 20.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 20.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 20.
Parser(B) >> ... then shift 'multiplication', go to state 164
Parser(B) >> Reduce 173 [addition ::= multiplication], pop back to state 20.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Shift 'TK_PLUS', go to state 63
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY addition TK_PLUS]
Parser(B) >> Input 'TK_INTEGER' in state 63
Parser(B) >> Shift 'TK_INTEGER', go to state 152
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY addition TK_PLUS TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 152
Parser(B) >> Reduce 158 [term ::= TK_INTEGER], pop back to state 63.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 63.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 63.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 63.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 63.
Parser(B) >> ... then shift 'multiplication', go to state 163
Parser(B) >> Reduce 174 [addition ::= addition TK_PLUS multiplication], pop back to state 20.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Reduce 188 [concatenation ::= addition], pop back to state 20.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 191 [comparison ::= concatenation], pop back to state 20.
Parser(B) >> ... then shift 'comparison', go to state 213
Parser(B) >> Reduce 204 [or_expression ::= comparison], pop back to state 20.
Parser(B) >> ... then shift 'or_expression', go to state 220
Parser(B) >> Reduce 206 [and_expression ::= or_expression], pop back to state 20.
Parser(B) >> ... then shift 'and_expression', go to state 221
Parser(B) >> Reduce 208 [expression ::= and_expression], pop back to state 20.
Parser(B) >> ... then shift 'expression', go to state 267
Parser(B) >> Reduce 139 [say ::= TK_SAY expression], pop back to state 9.
Parser(B) >> ... then shift 'say', go to state 291
Parser(B) >> Reduce 45 [keyword_instruction ::= say], pop back to state 9.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 9.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_SAY' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 9.
Parser(B) >> ... then shift 'labeled_instruction', go to state 208
Parser(B) >> Reduce 20 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_SAY', go to state 20
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY]
Parser(B) >> Input 'TK_FLOAT' in state 20
Parser(B) >> Shift 'TK_FLOAT', go to state 153
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY TK_FLOAT]
Parser(B) >> Input 'TK_MINUS' in state 153
Parser(B) >> Reduce 157 [term ::= TK_FLOAT], pop back to state 20.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 20.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 20.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 20.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 20.
Parser(B) >> ... then shift 'multiplication', go to state 164
Parser(B) >> Reduce 173 [addition ::= multiplication], pop back to state 20.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Shift 'TK_MINUS', go to state 62
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY addition TK_MINUS]
Parser(B) >> Input 'TK_FLOAT' in state 62
Parser(B) >> Shift 'TK_FLOAT', go to state 153
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY addition TK_MINUS TK_FLOAT]
Parser(B) >> Input 'TK_EOC' in state 153
Parser(B) >> Reduce 157 [term ::= TK_FLOAT], pop back to state 62.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 62.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 62.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 62.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 62.
Parser(B) >> ... then shift 'multiplication', go to state 162
Parser(B) >> Reduce 175 [addition ::= addition TK_MINUS multiplication], pop back to state 20.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Reduce 188 [concatenation ::= addition], pop back to state 20.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 191 [comparison ::= concatenation], pop back to state 20.
Parser(B) >> ... then shift 'comparison', go to state 213
Parser(B) >> Reduce 204 [or_expression ::= comparison], pop back to state 20.
Parser(B) >> ... then shift 'or_expression', go to state 220
Parser(B) >> Reduce 206 [and_expression ::= or_expression], pop back to state 20.
Parser(B) >> ... then shift 'and_expression', go to state 221
Parser(B) >> Reduce 208 [expression ::= and_expression], pop back to state 20.
Parser(B) >> ... then shift 'expression', go to state 267
Parser(B) >> Reduce 139 [say ::= TK_SAY expression], pop back to state 9.
Parser(B) >> ... then shift 'say', go to state 291
Parser(B) >> Reduce 45 [keyword_instruction ::= say], pop back to state 9.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 9.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_SAY' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 9.
Parser(B) >> ... then shift 'labeled_instruction', go to state 208
Parser(B) >> Reduce 20 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_SAY', go to state 20
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY]
Parser(B) >> Input 'TK_INTEGER' in state 20
Parser(B) >> Shift 'TK_INTEGER', go to state 152
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY TK_INTEGER]
Parser(B) >> Input 'TK_DIV' in state 152
Parser(B) >> Reduce 158 [term ::= TK_INTEGER], pop back to state 20.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 20.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 20.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 20.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 20.
Parser(B) >> ... then shift 'multiplication', go to state 164
Parser(B) >> Shift 'TK_DIV', go to state 68
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY multiplication TK_DIV]
Parser(B) >> Input 'TK_INTEGER' in state 68
Parser(B) >> Shift 'TK_INTEGER', go to state 152
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_SAY multiplication TK_DIV TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 152
Parser(B) >> Reduce 158 [term ::= TK_INTEGER], pop back to state 68.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 68.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 68.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 68.
Parser(B) >> ... then shift 'power_expression', go to state 141
Parser(B) >> Reduce 170 [multiplication ::= multiplication TK_DIV power_expression], pop back to state 20.
Parser(B) >> ... then shift 'multiplication', go to state 164
Parser(B) >> Reduce 173 [addition ::= multiplication], pop back to state 20.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Reduce 188 [concatenation ::= addition], pop back to state 20.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 191 [comparison ::= concatenation], pop back to state 20.
Parser(B) >> ... then shift 'comparison', go to state 213
Parser(B) >> Reduce 204 [or_expression ::= comparison], pop back to state 20.
Parser(B) >> ... then shift 'or_expression', go to state 220
Parser(B) >> Reduce 206 [and_expression ::= or_expression], pop back to state 20.
Parser(B) >> ... then shift 'and_expression', go to state 221
Parser(B) >> Reduce 208 [expression ::= and_expression], pop back to state 20.
Parser(B) >> ... then shift 'expression', go to state 267
Parser(B) >> Reduce 139 [say ::= TK_SAY expression], pop back to state 9.
Parser(B) >> ... then shift 'say', go to state 291
Parser(B) >> Reduce 45 [keyword_instruction ::= say], pop back to state 9.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 9.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_RETURN' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 9.
Parser(B) >> ... then shift 'labeled_instruction', go to state 208
Parser(B) >> Reduce 20 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_RETURN', go to state 21
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_RETURN]
Parser(B) >> Input 'TK_INTEGER' in state 21
Parser(B) >> Shift 'TK_INTEGER', go to state 152
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_RETURN TK_INTEGER]
Parser(B) >> Input 'TK_EOC' in state 152
Parser(B) >> Reduce 158 [term ::= TK_INTEGER], pop back to state 21.
Parser(B) >> ... then shift 'term', go to state 151
Parser(B) >> Reduce 160 [bracket ::= term], pop back to state 21.
Parser(B) >> ... then shift 'bracket', go to state 149
Parser(B) >> Reduce 162 [prefix_expression ::= bracket], pop back to state 21.
Parser(B) >> ... then shift 'prefix_expression', go to state 145
Parser(B) >> Reduce 166 [power_expression ::= prefix_expression], pop back to state 21.
Parser(B) >> ... then shift 'power_expression', go to state 144
Parser(B) >> Reduce 168 [multiplication ::= power_expression], pop back to state 21.
Parser(B) >> ... then shift 'multiplication', go to state 164
Parser(B) >> Reduce 173 [addition ::= multiplication], pop back to state 21.
Parser(B) >> ... then shift 'addition', go to state 168
Parser(B) >> Reduce 188 [concatenation ::= addition], pop back to state 21.
Parser(B) >> ... then shift 'concatenation', go to state 60
Parser(B) >> Reduce 191 [comparison ::= concatenation], pop back to state 21.
Parser(B) >> ... then shift 'comparison', go to state 213
Parser(B) >> Reduce 204 [or_expression ::= comparison], pop back to state 21.
Parser(B) >> ... then shift 'or_expression', go to state 220
Parser(B) >> Reduce 206 [and_expression ::= or_expression], pop back to state 21.
Parser(B) >> ... then shift 'and_expression', go to state 221
Parser(B) >> Reduce 208 [expression ::= and_expression], pop back to state 21.
Parser(B) >> ... then shift 'expression', go to state 268
Parser(B) >> Reduce 137 [return ::= TK_RETURN expression], pop back to state 9.
Parser(B) >> ... then shift 'return', go to state 292
Parser(B) >> Reduce 44 [keyword_instruction ::= return], pop back to state 9.
Parser(B) >> ... then shift 'keyword_instruction', go to state 303
Parser(B) >> Reduce 29 [single_instruction ::= keyword_instruction], pop back to state 9.
Parser(B) >> ... then shift 'single_instruction', go to state 95
Parser(B) >> Reduce 5 [junk ::=].
Parser(B) >> ... then shift 'junk', go to state 327
Parser(B) >> Shift 'TK_EOC', go to state 206
Parser(B) >> Return. Stack=[rexx_options instruction_list single_instruction junk TK_EOC]
Parser(B) >> Input 'TK_EOS' in state 206
Parser(B) >> Reduce 22 [labeled_instruction ::= single_instruction junk TK_EOC], pop back to state 9.
Parser(B) >> ... then shift 'labeled_instruction', go to state 208
Parser(B) >> Reduce 20 [instruction_list ::= instruction_list labeled_instruction], pop back to state 2.
Parser(B) >> ... then shift 'instruction_list', go to state 9
Parser(B) >> Shift 'TK_EOS', go to state 329
Parser(B) >> Return. Stack=[rexx_options instruction_list TK_EOS]
Parser(B) >> Input '$' in state 329
Parser(B) >> Reduce 0 [program ::= rexx_options instruction_list TK_EOS], pop back to state 0.
Parser(B) >> ... then shift 'program', pending reduce -2
Parser(B) >> Accept!
