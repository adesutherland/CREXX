* cREXX Assembler Test Suite - EBCDIC
*
* EBCDIC Characters Used in Tests
* 193	C1	A
* 194	C2	B
* 195	C3	C
* 196	C4	D
* 197	C5	E
* 198	C6	F
* 199	C7	G
* 200	C8	H
* 201	C9	I
* 209	D1	J
* 210	D2	K
* 211	D3	L
* 212	D4	M
* 213	D5	N
* 214	D6	O
* 215	D7	P
* 216	D8	Q
* 217	D9	R
* 226	E2	S
* 227	E3	T
* 228	E4	U
* 229	E5	V
* 230	E6	W
* 231	E7	X
* 232	E8	Y
* 233	E9	Z

.globals=2
g0 .expose=tests.success
g1 .expose=tests.failure

main()         .locals=1
               say "cREXX Assembler Test Suite - EBCDIC - Version cREXX-Phase-0 v0.1.6-f0022\n"

               * Zero result count
               load g0,0
               load g1,0

               * Run Tests
               call test_appendchar()
               call test_strlen()
               call test_getstrpos()
               call test_setstrpos_strchar()

               * Print Results
               iadd r0, g0, g1
               itos r0
               ssay r0
               say " tests run\n"
               brt failures, g1

               * No failures
               say "Success\n"
               ret 0

failures:      * There were failures
               itos g1
               say "*** "
               ssay g1
               say " tests failed ***\n"
               ret 1

expect_true()  .locals=0
               brt expect_true_ok,a1
               iadd g1,g1,1 * Failure
               say " FAILED\n"
               ret
expect_true_ok:
               iadd g0,g0,1 * Success
               say " ok\n"
               ret

expect_false() .locals=0
               brf expect_false_ok,a1
               iadd g1,g1,1 * Failure
               say " FAILED\n"
               ret
expect_false_ok:
               iadd g0,g0,1 * Success
               say " ok\n"
               ret

* Tests

test_appendchar()  .locals=5

               load r3,1 * One argument when calling expect_true/false
               say "Testing appendchar ..."
               load r1, "ABCD"
               load r2,197 * EBCDIC Letter E
               appendchar r1,r2
               seq r4,r1,"ABCDE"
               call r0,expect_true(),r3
               ret

test_strlen()  .locals=6
               load r3,1 * One argument when calling expect_true/false
               say "Testing strlen 1 ..."
               load r1, "ABCD"
               strlen r2,r1
               ieq r4,r2,4
               call r0,expect_true(),r3
               say "Testing strlen 2 ..."
               copy r5,r1
               strlen r2,r5
               ieq r4,r2,4
               call r0,expect_true(),r3
               say "Testing strlen 3 ..."
               load r1, "ABCD"
               load r5, "QWERTYUIOPQWERTYUIOPQWERTYUIOP"
               concat r1,r1,r5
               strlen r2,r1
               ieq r4,r2,34
               call r0,expect_true(),r3
               ret

* Test getstrpos
test_getstrpos() .locals=6
               load r3,1 * One argument when calling expect_true/false
               say "Testing getstrpos ..."
               load r1,"ABCDE"
               load r2,3
               setstrpos r1,r2
               load r2,0 * Clear r2 (just in case)
               getstrpos r2,r1
               ieq r4,r2,3
               call r0,expect_true(),r3
               ret

* Test strchar and setstrpos
test_setstrpos_strchar() .locals=6
               load r3,1 * One argument when calling expect_true/false
               say "Testing strchar and setstrpos 1 ..."
               load r1,"ABCDE"
               load r2,4
               setstrpos r1,r2
               strchar r2,r1
               ieq r4,r2,197 * E
               call r0,expect_true(),r3

               say "Testing strchar and setstrpos 2 ..."
               *        01234567891123456789212345678931234567894123456
               load r1,"-ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRST"
               load r2,4
               setstrpos r1,r2
               strchar r2,r1
               ieq r4,r2,196 * D
               call r0,expect_true(),r3

               say "Testing strchar and setstrpos 3 ..."
               load r2,5
               setstrpos r1,r2
               strchar r2,r1
               ieq r4,r2,197 * E
               call r0,expect_true(),r3

               say "Testing strchar and setstrpos 4 ..."
               load r2,44
               setstrpos r1,r2
               strchar r2,r1
               ieq r4,r2,217 * R
               call r0,expect_true(),r3

               say "Testing strchar and setstrpos 5 ..."
               load r2,41
               setstrpos r1,r2
               strchar r2,r1
               ieq r4,r2,214 * O
               call r0,expect_true(),r3

               say "Testing strchar and setstrpos 6 ..."
               load r2,40
               setstrpos r1,r2
               strchar r2,r1
               ieq r4,r2,213 * N
               call r0,expect_true(),r3

               say "Testing strchar and setstrpos 7 ..."
               load r2,1
               setstrpos r1,r2
               strchar r2,r1
               ieq r4,r2,193 * A
               call r0,expect_true(),r3

               ret

